%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<< /F1 2 0 R /F2 3 0 R /F3 4 0 R /F4 8 0 R /F5 9 0 R >>
endobj
2 0 obj
<< /BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font >>
endobj
3 0 obj
<< /BaseFont /Helvetica-Bold /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font >>
endobj
4 0 obj
<< /BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font >>
endobj
5 0 obj
<< /Contents 57 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
6 0 obj
<< /Contents 58 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
7 0 obj
<< /Contents 59 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
8 0 obj
<< /BaseFont /Helvetica-BoldOblique /Encoding /WinAnsiEncoding /Name /F4 /Subtype /Type1 /Type /Font >>
endobj
9 0 obj
<< /BaseFont /Helvetica-Oblique /Encoding /WinAnsiEncoding /Name /F5 /Subtype /Type1 /Type /Font >>
endobj
10 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 5 0 R /XYZ 62.69291 578.5236 0 ] /Rect [ 91.04291 194.4236 161.6329 206.4236 ] /Subtype /Link /Type /Annot >>
endobj
11 0 obj
<< /Annots [ 10 0 R ] /Contents 60 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
12 0 obj
<< /Contents 61 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
13 0 obj
<< /Contents 62 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
14 0 obj
<< /Contents 63 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
15 0 obj
<< /Contents 64 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
16 0 obj
<< /Contents 65 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
17 0 obj
<< /Contents 66 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
18 0 obj
<< /Contents 67 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
19 0 obj
<< /Contents 68 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
20 0 obj
<< /Contents 69 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
21 0 obj
<< /Contents 70 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
22 0 obj
<< /Contents 71 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
23 0 obj
<< /Contents 72 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
24 0 obj
<< /Contents 73 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
25 0 obj
<< /Contents 74 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
26 0 obj
<< /Contents 75 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
27 0 obj
<< /Contents 76 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
28 0 obj
<< /Contents 77 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
29 0 obj
<< /Contents 78 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
30 0 obj
<< /Contents 79 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
31 0 obj
<< /Contents 80 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 56 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
32 0 obj
<< /Outlines 34 0 R /PageLabels 81 0 R /PageMode /UseNone /Pages 56 0 R /Type /Catalog >>
endobj
33 0 obj
<< /Author () /CreationDate (D:20171023161341+08'00') /Creator (\(unspecified\)) /Keywords () /ModDate (D:20171023161341+08'00') /Producer (ReportLab PDF Library - www.reportlab.com) 
  /Subject (\(unspecified\)) /Title (OVS Faucet Tutorial) /Trapped /False >>
endobj
34 0 obj
<< /Count 24 /First 35 0 R /Last 55 0 R /Type /Outlines >>
endobj
35 0 obj
<< /Dest [ 5 0 R /XYZ 62.69291 575.0236 0 ] /Next 36 0 R /Parent 34 0 R /Title (Setting Up OVS) >>
endobj
36 0 obj
<< /Dest [ 6 0 R /XYZ 62.69291 626.6236 0 ] /Next 37 0 R /Parent 34 0 R /Prev 35 0 R /Title (Setting up Faucet) >>
endobj
37 0 obj
<< /Dest [ 7 0 R /XYZ 62.69291 585.4236 0 ] /Next 38 0 R /Parent 34 0 R /Prev 36 0 R /Title (Overview) >>
endobj
38 0 obj
<< /Count 4 /Dest [ 7 0 R /XYZ 62.69291 156.4236 0 ] /First 39 0 R /Last 42 0 R /Next 43 0 R /Parent 34 0 R 
  /Prev 37 0 R /Title (Switching) >>
endobj
39 0 obj
<< /Dest [ 13 0 R /XYZ 62.69291 266.6236 0 ] /Next 40 0 R /Parent 38 0 R /Title (OpenFlow Layer) >>
endobj
40 0 obj
<< /Dest [ 16 0 R /XYZ 62.69291 196.4236 0 ] /Next 41 0 R /Parent 38 0 R /Prev 39 0 R /Title (Tracing) >>
endobj
41 0 obj
<< /Dest [ 18 0 R /XYZ 62.69291 652.0236 0 ] /Next 42 0 R /Parent 38 0 R /Prev 40 0 R /Title (Triggering MAC Learning) >>
endobj
42 0 obj
<< /Dest [ 19 0 R /XYZ 62.69291 220.2236 0 ] /Parent 38 0 R /Prev 41 0 R /Title (Performance) >>
endobj
43 0 obj
<< /Count 9 /Dest [ 22 0 R /XYZ 62.69291 717.0236 0 ] /First 44 0 R /Last 52 0 R /Next 53 0 R /Parent 34 0 R 
  /Prev 38 0 R /Title (Routing) >>
endobj
44 0 obj
<< /Dest [ 22 0 R /XYZ 62.69291 128.6236 0 ] /Next 45 0 R /Parent 43 0 R /Title (OpenFlow Layer) >>
endobj
45 0 obj
<< /Count 6 /Dest [ 24 0 R /XYZ 62.69291 765.0236 0 ] /First 46 0 R /Last 51 0 R /Next 52 0 R /Parent 43 0 R 
  /Prev 44 0 R /Title (Tracing) >>
endobj
46 0 obj
<< /Dest [ 24 0 R /XYZ 62.69291 491.8236 0 ] /Next 47 0 R /Parent 45 0 R /Title (Step 1: Host ARP for Router) >>
endobj
47 0 obj
<< /Dest [ 25 0 R /XYZ 62.69291 765.0236 0 ] /Next 48 0 R /Parent 45 0 R /Prev 46 0 R /Title (Step 2: Router Sends ARP Reply) >>
endobj
48 0 obj
<< /Dest [ 25 0 R /XYZ 62.69291 449.2236 0 ] /Next 49 0 R /Parent 45 0 R /Prev 47 0 R /Title (Step 3: Host Sends IP Packet) >>
endobj
49 0 obj
<< /Dest [ 26 0 R /XYZ 62.69291 705.0236 0 ] /Next 50 0 R /Parent 45 0 R /Prev 48 0 R /Title (Step 4: Router Broadcasts ARP Request) >>
endobj
50 0 obj
<< /Dest [ 26 0 R /XYZ 62.69291 430.4236 0 ] /Next 51 0 R /Parent 45 0 R /Prev 49 0 R /Title (Step 5: Host 2 Sends ARP Reply) >>
endobj
51 0 obj
<< /Dest [ 27 0 R /XYZ 62.69291 578.6236 0 ] /Parent 45 0 R /Prev 50 0 R /Title (Step 6: IP Packet Delivery) >>
endobj
52 0 obj
<< /Dest [ 28 0 R /XYZ 62.69291 765.0236 0 ] /Parent 43 0 R /Prev 45 0 R /Title (Performance) >>
endobj
53 0 obj
<< /Dest [ 28 0 R /XYZ 62.69291 294.6236 0 ] /Next 54 0 R /Parent 34 0 R /Prev 43 0 R /Title (ACLs) >>
endobj
54 0 obj
<< /Dest [ 30 0 R /XYZ 62.69291 283.6236 0 ] /Next 55 0 R /Parent 34 0 R /Prev 53 0 R /Title (Finishing Up) >>
endobj
55 0 obj
<< /Dest [ 30 0 R /XYZ 62.69291 220.6236 0 ] /Parent 34 0 R /Prev 54 0 R /Title (Further Directions) >>
endobj
56 0 obj
<< /Count 24 /Kids [ 5 0 R 6 0 R 7 0 R 11 0 R 12 0 R 13 0 R 14 0 R 15 0 R 16 0 R 17 0 R 
  18 0 R 19 0 R 20 0 R 21 0 R 22 0 R 23 0 R 24 0 R 25 0 R 26 0 R 27 0 R 
  28 0 R 29 0 R 30 0 R 31 0 R ] /Type /Pages >>
endobj
57 0 obj
<< /Length 6636 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 4 Tm /F2 20 Tf 24 TL 139.3649 0 Td (OVS Faucet Tutorial) Tj T* -139.3649 0 Td ET
Q
Q
q
1 0 0 1 62.69291 683.0236 cm
q
BT 1 0 0 1 0 38 Tm 1.499984 Tw 12 TL /F1 10 Tf 0 0 0 rg (This tutorial demonstrates how Open vSwitch works with a controller, using the Faucet controller as a) Tj T* 0 Tw 1.131098 Tw (simple way to get started. It was tested with the "master" branch of Open vSwitch and version 1.6.7 of) Tj T* 0 Tw .442765 Tw (Faucet in October 2017. It does not use advanced or recently added features in OVS or Faucet, so other) Tj T* 0 Tw (versions of both pieces of software are likely to work equally well.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 617.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .274198 Tw (The goal of the tutorial is to demonstrate Open vSwitch and Faucet in an end-to-end way, that is, to show) Tj T* 0 Tw .797633 Tw (how it works from the Faucet controller configuration at the top, through the OpenFlow flow table, to the) Tj T* 0 Tw .081235 Tw (datapath processing. Along the way, in addition to helping to understand the architecture at each level, we) Tj T* 0 Tw 1.686136 Tw (discuss performance and troubleshooting issues. We hope that this demonstration makes it easier for) Tj T* 0 Tw (users and potential users to understand how Open vSwitch works and how to debug and troubleshoot it.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 587.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.462765 Tw (We provide enough details in the tutorial that you should be able to fully follow along by following the) Tj T* 0 Tw (instructions.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 554.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Setting Up OVS) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 536.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This section explains how to set up Open vSwitch for the purpose of using it with Faucet for the tutorial.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 470.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 1.387045 Tw (You might already have Open vSwitch installed on one or more computers or VMs, perhaps set up to) Tj T* 0 Tw 1.402988 Tw (control a set of VMs or a physical network. This is admirable, but we will be using Open vSwitch in a) Tj T* 0 Tw 1.097485 Tw (different way to set up a simulation environment called the OVS "sandbox". The sandbox does not use) Tj T* 0 Tw 1.329987 Tw (virtual machines or containers, which makes it more limited, but on the other hand it is \(in this writer's) Tj T* 0 Tw (opinion\) easier to set up.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 416.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.415251 Tw (There are two ways to start a sandbox: one that uses the Open vSwitch that is already installed on a) Tj T* 0 Tw .36104 Tw (system, and another that uses a copy of Open vSwitch that has been built but not yet installed. The latter) Tj T* 0 Tw 1.78436 Tw (is more often used and thus better tested, but both should work. The instructions below explain both) Tj T* 0 Tw (approaches:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 410.0236 cm
Q
q
1 0 0 1 62.69291 410.0236 cm
Q
q
1 0 0 1 62.69291 314.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 80.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 80.2 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Get a copy of the Open vSwitch source repository using Git, then ) Tj /F3 10 Tf 0 0 0 rg (cd ) Tj /F1 10 Tf 0 0 0 rg (into the new directory:) Tj T* ET
Q
Q
q
1 0 0 1 23 35 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL ($ git clone https://github.com/openvswitch/ovs.git) Tj T* ($ cd ovs) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.142209 Tw (The default checkout is the master branch. You can check out a tag \(such as v2.8.0\) or a branch) Tj T* 0 Tw (\(such as origin/branch-2.8\), if you prefer.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 308.8236 cm
Q
q
1 0 0 1 62.69291 177.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 116.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 80.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .079036 Tw (If you do not already have an installed copy of Open vSwitch on your system, or if you do not want to) Tj T* 0 Tw 1.00811 Tw (use it for the sandbox \(the sandbox will not disturb the functionality of any existing switches\), then) Tj T* 0 Tw .099535 Tw (proceed to step 3. If you do have an installed copy and you want to use it for the sandbox, try to start) Tj T* 0 Tw (the sandbox by running:) Tj T* ET
Q
Q
q
1 0 0 1 23 47 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ tutorial/ovs-sandbox) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm .280542 Tw 12 TL /F1 10 Tf 0 0 0 rg (If it is successful, you will find yourself in a subshell environment, which is the sandbox \(you can exit) Tj T* 0 Tw .140988 Tw (with ) Tj /F3 10 Tf 0 0 0 rg (exit ) Tj /F1 10 Tf 0 0 0 rg (or Control+D\). If so, you're finished and do not need to complete the rest of the steps. If it) Tj T* 0 Tw (fails, you can proceed to step 3 to build Open vSwitch anyway.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 171.6236 cm
Q
q
1 0 0 1 62.69291 135.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm 1.631984 Tw 12 TL /F1 10 Tf 0 0 0 rg (Before you build, you might want to check that your system meets the build requirements. Read) Tj T* 0 Tw .964651 Tw 1 0 0 rg (:doc:`/intro/install/general` ) Tj 0 0 0 rg (to find out. For this tutorial, there is no need to compile the Linux kernel) Tj T* 0 Tw (module, or to use any of the optional libraries such as OpenSSL, DPDK, or libcap-ng.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 129.6236 cm
Q
q
1 0 0 1 62.69291 117.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Configure and build Open vSwitch:) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
58 0 obj
<< /Length 7226 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 715.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 36.2 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL ($ ./boot.sh) Tj T* ($ ./configure) Tj T* ($ make -j4) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 709.8236 cm
Q
q
1 0 0 1 62.69291 638.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 56.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 56.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Try out the sandbox by running:) Tj T* ET
Q
Q
q
1 0 0 1 23 23 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ make sandbox) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (You can exit the sandbox with ) Tj /F3 10 Tf 0 0 0 rg (exit ) Tj /F1 10 Tf 0 0 0 rg (or Control+D.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 638.6236 cm
Q
q
1 0 0 1 62.69291 605.6236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Setting up Faucet) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 551.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.093672 Tw (This section explains how to get a copy of Faucet and set it up appropriately for the tutorial. There are) Tj T* 0 Tw .321654 Tw (many other ways to install Faucet, but this simple approach worked well for me. It has the advantage that) Tj T* 0 Tw .864692 Tw (it does not require modifying any system-level files or directories on your machine. It does, on the other) Tj T* 0 Tw (hand, require Docker, so make sure you have it installed and working.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 509.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.49237 Tw (It will be a little easier to go through the rest of the tutorial if you run these instructions in a separate) Tj T* 0 Tw .43561 Tw (terminal from the one that you're using for Open vSwitch, because it's often necessary to switch between) Tj T* 0 Tw (one and the other.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 503.6236 cm
Q
q
1 0 0 1 62.69291 503.6236 cm
Q
q
1 0 0 1 62.69291 387.2236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 101.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 101.4 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Get a copy of the Faucet source repository using Git, then ) Tj /F3 10 Tf 0 0 0 rg (cd ) Tj /F1 10 Tf 0 0 0 rg (into the new directory:) Tj T* ET
Q
Q
q
1 0 0 1 23 56.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL ($ git clone https://github.com/faucetsdn/faucet.git) Tj T* ($ cd faucet) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 30.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (At this point I checked out the latest tag:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ git checkout v1.6.7) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 381.2236 cm
Q
q
1 0 0 1 62.69291 310.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 56.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 56.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Build a docker container image:) Tj T* ET
Q
Q
q
1 0 0 1 23 23 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ docker build -t faucet/faucet .) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This will take a few minutes.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 304.0236 cm
Q
q
1 0 0 1 62.69291 196.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 92.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 92.2 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Create an installation directory under the ) Tj /F3 10 Tf 0 0 0 rg (faucet ) Tj /F1 10 Tf 0 0 0 rg (directory for the docker image to use:) Tj T* ET
Q
Q
q
1 0 0 1 23 59 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ mkdir inst) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 38 Tm 4.555366 Tw 12 TL /F1 10 Tf 0 0 0 rg (The Faucet configuration will go in ) Tj /F3 10 Tf 0 0 0 rg (inst/faucet.yaml ) Tj /F1 10 Tf 0 0 0 rg (and its main log will appear in) Tj T* 0 Tw 7.954976 Tw /F3 10 Tf 0 0 0 rg (inst/faucet.log) Tj /F1 10 Tf 0 0 0 rg (. \(The official Faucet installation instructions call to put these in) Tj T* 0 Tw 3.47372 Tw /F3 10 Tf 0 0 0 rg (/etc/ryu/faucet ) Tj /F1 10 Tf 0 0 0 rg (and ) Tj /F3 10 Tf 0 0 0 rg (/var/log/ryu/faucet) Tj /F1 10 Tf 0 0 0 rg (, respectively, but we avoid modifying these) Tj T* 0 Tw (system directories.\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 190.8236 cm
Q
q
1 0 0 1 62.69291 145.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 30.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 30.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Create a container and start Faucet:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 756 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ docker run -d --name faucet -v `pwd`/inst/:/etc/ryu/faucet/ -v `pwd`/inst/:/var/log/ryu/faucet/ -p 6653:6653 faucet/faucet) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 139.6236 cm
Q
q
1 0 0 1 62.69291 115.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .270651 Tw 12 TL /F1 10 Tf 0 0 0 rg (Look in ) Tj /F3 10 Tf 0 0 0 rg (inst/faucet.log ) Tj /F1 10 Tf 0 0 0 rg (to verify that Faucet started. It will probably start with an exception and) Tj T* 0 Tw (traceback because we have not yet created ) Tj /F3 10 Tf 0 0 0 rg (inst/faucet.yaml) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 109.6236 cm
Q
q
1 0 0 1 62.69291 97.62362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Later on, to make a new or updated Faucet configuration take effect quickly, you can run:) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
59 0 obj
<< /Length 7428 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 597.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 154.6 Tm  T* ET
q
1 0 0 1 23 139.4 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ docker exec faucet pkill -HUP -f faucet.faucet) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 113.4 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Another way is to stop and start the Faucet container:) Tj T* ET
Q
Q
q
1 0 0 1 23 80.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ docker restart faucet) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 42.2 cm
q
BT 1 0 0 1 0 14 Tm 2.313876 Tw 12 TL /F1 10 Tf 0 0 0 rg (You can also stop and delete the container; after this, to start it again, you need to rerun the) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (docker) Tj ( ) Tj (run ) Tj /F1 10 Tf 0 0 0 rg (command:) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL ($ docker stop faucet) Tj T* ($ docker rm faucet) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 597.4236 cm
Q
q
1 0 0 1 62.69291 564.4236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Overview) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 534.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.930542 Tw (Now that Open vSwitch and Faucet are ready, here's an overview of what we're going to do for the) Tj T* 0 Tw (remainder of the tutorial:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 528.4236 cm
Q
q
1 0 0 1 62.69291 528.4236 cm
Q
q
1 0 0 1 62.69291 516.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Switching: Set up an L2 network with Faucet.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 510.4236 cm
Q
q
1 0 0 1 62.69291 498.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Routing: Route between multiple L3 networks with Faucet.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 492.4236 cm
Q
q
1 0 0 1 62.69291 480.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (ACLs: Add and modify access control rules.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 480.4236 cm
Q
q
1 0 0 1 62.69291 438.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .665898 Tw (At each step, we will take a look at how the features in question work from Faucet at the top to the data) Tj T* 0 Tw .04528 Tw (plane layer at the bottom. From the highest to lowest level, these layers and the software components that) Tj T* 0 Tw (connect them are:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 432.4236 cm
Q
q
1 0 0 1 62.69291 432.4236 cm
Q
q
1 0 0 1 62.69291 366.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 51 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 51 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Faucet, which as the top level in the system is the authoritative source of the network configuration.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 38 Tm 1.583735 Tw 12 TL /F1 10 Tf 0 0 0 rg (Faucet connects to a variety of monitoring and performance tools, but we won't use them in this) Tj T* 0 Tw 2.330751 Tw (tutorial. Our main insights into the system will be through ) Tj /F3 10 Tf 0 0 0 rg (faucet.yaml ) Tj /F1 10 Tf 0 0 0 rg (for configuration and) Tj T* 0 Tw 1.135318 Tw /F3 10 Tf 0 0 0 rg (faucet.log ) Tj /F1 10 Tf 0 0 0 rg (to observe state, such as MAC learning and ARP resolution, and to tell when we've) Tj T* 0 Tw (screwed up configuration syntax or semantics.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 360.4236 cm
Q
q
1 0 0 1 62.69291 252.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.498443 Tw (The OpenFlow subsystem in Open vSwitch. OpenFlow is the protocol, standardized by the Open) Tj T* 0 Tw 2.18229 Tw (Networking Foundation, that controllers like Faucet use to control how Open vSwitch and other) Tj T* 0 Tw (switches treat packets in the network.) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
BT 1 0 0 1 0 26 Tm .331318 Tw 12 TL /F1 10 Tf 0 0 0 rg (We will use ) Tj /F3 10 Tf 0 0 0 rg (ovs-ofctl) Tj /F1 10 Tf 0 0 0 rg (, a utility that comes with Open vSwitch, to observe and occasionally modify) Tj T* 0 Tw .544597 Tw (Open vSwitch's OpenFlow behavior. We will also use ) Tj /F3 10 Tf 0 0 0 rg (ovs-appctl) Tj /F1 10 Tf 0 0 0 rg (, a utility for communicating with) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (ovs-vswitchd ) Tj /F1 10 Tf 0 0 0 rg (and other Open vSwitch daemons, to ask "what-if?" type questions.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.148651 Tw (In addition, the OVS sandbox by default raises the Open vSwitch logging level for OpenFlow high) Tj T* 0 Tw (enough that we can learn a great deal about OpenFlow behavior simply by reading its log file.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 246.4236 cm
Q
q
1 0 0 1 62.69291 198.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .385366 Tw (Open vSwitch datapath. This is essentially a cache designed to accelerate packet processing. Open) Tj T* 0 Tw 3.741318 Tw (vSwitch includes a few different datapaths, such as one based on the Linux kernel and a) Tj T* 0 Tw 2.43816 Tw (userspace-only datapath \(sometimes called the "DPDK" datapath\). The OVS sandbox uses the) Tj T* 0 Tw (latter, but the principles behind it apply equally well to other datapaths.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 198.4236 cm
Q
q
1 0 0 1 62.69291 168.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.534651 Tw (At each step, we discuss how the design of each layer influences performance. We demonstrate how) Tj T* 0 Tw (Open vSwitch features can be used to debug, troubleshoot, and understand the system as a whole.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 135.4236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Switching) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 93.42362 cm
q
BT 1 0 0 1 0 26 Tm .648876 Tw 12 TL /F1 10 Tf 0 0 0 rg (Layer-2 \(L2\) switching is the basis of modern networking. It's also very simple and a good place to start,) Tj T* 0 Tw .529036 Tw (so let's set up a switch with some VLANs in Faucet and see how it works at each layer. Begin by putting) Tj T* 0 Tw (the following into ) Tj /F3 10 Tf 0 0 0 rg (inst/faucet.yaml) Tj /F1 10 Tf 0 0 0 rg (:) Tj T* ET
Q
Q
 
endstream
endobj
60 0 obj
<< /Length 4518 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 523.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 240 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 218 Tm /F3 10 Tf 12 TL (dps:) Tj T* (    switch-1:) Tj T* (        dp_id: 0x1) Tj T* (        timeout: 3600) Tj T* (        arp_neighbor_timeout: 3600) Tj T* (        interfaces:) Tj T* (            1:) Tj T* (                native_vlan: 100) Tj T* (            2:) Tj T* (                native_vlan: 100) Tj T* (            3:) Tj T* (                native_vlan: 100) Tj T* (            4:) Tj T* (                native_vlan: 200) Tj T* (            5:) Tj T* (                native_vlan: 200) Tj T* (vlans:) Tj T* (    100:) Tj T* (    200:) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 479.8236 cm
q
BT 1 0 0 1 0 26 Tm .649318 Tw 12 TL /F1 10 Tf 0 0 0 rg (This configuration file defines a single switch \("datapath" or "dp"\) named ) Tj /F3 10 Tf 0 0 0 rg (switch-1) Tj /F1 10 Tf 0 0 0 rg (. The switch has five) Tj T* 0 Tw .176946 Tw (ports, numbered 1 through 5. Ports 1, 2, and 3 are in VLAN 100, and ports 4 and 5 are in VLAN 2. Faucet) Tj T* 0 Tw (can identify the switch from its datapath ID, which is defined to be 0x1.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 467.8236 cm
Q
q
1 0 0 1 62.69291 372.8236 cm
.960784 .960784 .862745 rg
n 0 95 469.8898 -95 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 69 Tm  T* ET
q
1 0 0 1 16 64 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F4 12.5 Tf 15 TL (Note) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.80061 Tw (This also sets high MAC learning and ARP timeouts. The defaults are 5 minutes and about 8) Tj T* 0 Tw 1.258443 Tw (minutes, which are fine in production but sometimes too fast for manual experimentation. \(Don't) Tj T* 0 Tw (use a timeout bigger than about 65000 seconds because it will crash Faucet.\)) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 95 m 469.8898 95 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 95 l S
n 469.8898 0 m 469.8898 95 l S
Q
Q
q
1 0 0 1 62.69291 366.8236 cm
Q
q
1 0 0 1 62.69291 348.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Now restart Faucet so that the configuration takes effect, e.g.:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 315.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ docker restart faucet) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 283.6236 cm
q
BT 1 0 0 1 0 14 Tm 2.169398 Tw 12 TL /F1 10 Tf 0 0 0 rg (Assuming that the configuration update is successful, you should now see a new line at the end of) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (inst/faucet.log) Tj /F1 10 Tf 0 0 0 rg (:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 250.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (Oct 14 22:36:42 faucet INFO     Add new datapath DPID 1 \(0x1\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 194.4236 cm
q
BT 1 0 0 1 0 38 Tm .090465 Tw 12 TL /F1 10 Tf 0 0 0 rg (Faucet is now waiting for a switch with datapath ID 0x1 to connect to it over OpenFlow, so our next step is) Tj T* 0 Tw .594988 Tw (to create a switch with OVS and make it connect to Faucet. To do that, switch to the terminal where you) Tj T* 0 Tw .202126 Tw (checked out OVS and start a sandbox with ) Tj /F3 10 Tf 0 0 0 rg (make) Tj ( ) Tj (sandbox ) Tj /F1 10 Tf 0 0 0 rg (or ) Tj /F5 10 Tf 0 0 0 rg (tutorial/ovs-sandbox` ) Tj /F1 10 Tf 0 0 0 rg (\(as explained earlier) Tj T* 0 Tw (under ) Tj 0 0 .501961 rg (Setting Up OVS) Tj 0 0 0 rg (\). You should see something like this toward the end of the output:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 77.22362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 108 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F3 10 Tf 12 TL (----------------------------------------------------------------------) Tj T* (You are running in a dummy Open vSwitch environment.  You can use) Tj T* (ovs-vsctl, ovs-ofctl, ovs-appctl, and other tools to work with the) Tj T* (dummy switch.) Tj T*  T* (Log files, pidfiles, and the configuration database are in the) Tj T* ("sandbox" subdirectory.) Tj T*  T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
61 0 obj
<< /Length 6139 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 727.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL (Exit the shell to kill the running daemons.) Tj T* (blp@sigabrt:~/nicira/ovs/tutorial\(0\)$) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 659.8236 cm
q
BT 1 0 0 1 0 50 Tm .367045 Tw 12 TL /F1 10 Tf 0 0 0 rg (Inside the sandbox, create a switch \("bridge"\) named ) Tj /F3 10 Tf 0 0 0 rg (br0) Tj /F1 10 Tf 0 0 0 rg (, set its datapath ID to 0x1, add simulated ports) Tj T* 0 Tw .121988 Tw (to it named ) Tj /F3 10 Tf 0 0 0 rg (p1 ) Tj /F1 10 Tf 0 0 0 rg (through ) Tj /F3 10 Tf 0 0 0 rg (p5) Tj /F1 10 Tf 0 0 0 rg (, and tell it to connect to the Faucet controller. To make it easier to understand,) Tj T* 0 Tw .227132 Tw (we request for port ) Tj /F3 10 Tf 0 0 0 rg (p1 ) Tj /F1 10 Tf 0 0 0 rg (to be assigned OpenFlow port 1, ) Tj /F3 10 Tf 0 0 0 rg (p2 ) Tj /F1 10 Tf 0 0 0 rg (port 2, and so on. As a final touch, configure) Tj T* 0 Tw .048651 Tw (the controller to be "out-of-band" \(this is mainly to avoid some annoying messages in the ) Tj /F3 10 Tf 0 0 0 rg (ovs-vswitchd) Tj T* 0 Tw /F1 10 Tf 0 0 0 rg (logs; for more information, run ) Tj /F3 10 Tf 0 0 0 rg (man) Tj ( ) Tj (ovs-vswitchd.conf.db ) Tj /F1 10 Tf 0 0 0 rg (and search for ) Tj /F3 10 Tf 0 0 0 rg (connection_mode) Tj /F1 10 Tf 0 0 0 rg (\):) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 530.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 120 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 98 Tm /F3 10 Tf 12 TL ($ ovs-vsctl add-br br0 \\) Tj T* (         -- set bridge br0 other-config:datapath-id=0000000000000001 \\) Tj T* (         -- add-port br0 p1 -- set interface p1 ofport_request=1 \\) Tj T* (         -- add-port br0 p2 -- set interface p2 ofport_request=2 \\) Tj T* (         -- add-port br0 p3 -- set interface p3 ofport_request=3 \\) Tj T* (         -- add-port br0 p4 -- set interface p4 ofport_request=4 \\) Tj T* (         -- add-port br0 p5 -- set interface p5 ofport_request=5 \\) Tj T* (         -- set-controller br0 tcp:127.0.0.1:6653 \\) Tj T* (         -- set controller br0 connection-mode=out-of-band) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 510.6236 cm
Q
q
1 0 0 1 62.69291 403.6236 cm
.960784 .960784 .862745 rg
n 0 107 469.8898 -107 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 81 Tm  T* ET
q
1 0 0 1 16 76 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F4 12.5 Tf 15 TL (Note) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
BT 1 0 0 1 0 38 Tm 1.001098 Tw 12 TL /F1 10 Tf 0 0 0 rg (You don't have to run all of these as a single ) Tj /F3 10 Tf 0 0 0 rg (ovs-vsctl ) Tj /F1 10 Tf 0 0 0 rg (invocation. It is a little more efficient,) Tj T* 0 Tw .398651 Tw (though, and since it updates the OVS configuration in a single database transaction it means that,) Tj T* 0 Tw .638409 Tw (for example, there is never a time when the controller is set but it has not yet been configured as) Tj T* 0 Tw (out-of-band.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 107 m 469.8898 107 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 107 l S
n 469.8898 0 m 469.8898 107 l S
Q
Q
q
1 0 0 1 62.69291 397.6236 cm
Q
q
1 0 0 1 62.69291 367.6236 cm
q
BT 1 0 0 1 0 14 Tm .134651 Tw 12 TL /F1 10 Tf 0 0 0 rg (Now, if you look at ) Tj /F3 10 Tf 0 0 0 rg (inst/faucet.log ) Tj /F1 10 Tf 0 0 0 rg (again, you should see that Faucet recognized and configured the) Tj T* 0 Tw (new switch and its ports:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 250.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 648 108 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F3 10 Tf 12 TL (Oct 14 22:50:08 faucet.valve INFO     DPID 1 \(0x1\) Cold start configuring DP) Tj T* (Oct 14 22:50:08 faucet.valve INFO     DPID 1 \(0x1\) Configuring VLAN 100 vid:100 ports:Port 1,Port 2,Port 3) Tj T* (Oct 14 22:50:08 faucet.valve INFO     DPID 1 \(0x1\) Configuring VLAN 200 vid:200 ports:Port 4,Port 5) Tj T* (Oct 14 22:50:08 faucet.valve INFO     DPID 1 \(0x1\) Port Port 1 up, configuring) Tj T* (Oct 14 22:50:08 faucet.valve INFO     DPID 1 \(0x1\) Port Port 2 up, configuring) Tj T* (Oct 14 22:50:08 faucet.valve INFO     DPID 1 \(0x1\) Port Port 3 up, configuring) Tj T* (Oct 14 22:50:08 faucet.valve INFO     DPID 1 \(0x1\) Port Port 4 up, configuring) Tj T* (Oct 14 22:50:08 faucet.valve INFO     DPID 1 \(0x1\) Port Port 5 up, configuring) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 206.4236 cm
q
BT 1 0 0 1 0 26 Tm 4.457882 Tw 12 TL /F1 10 Tf 0 0 0 rg (Over on the Open vSwitch side, you can see a lot of related activity if you take a look in) Tj T* 0 Tw 1.309069 Tw /F3 10 Tf 0 0 0 rg (sandbox/ovs-vswitchd.log) Tj /F1 10 Tf 0 0 0 rg (. For example, here is the basic OpenFlow session setup and Faucet's) Tj T* 0 Tw (probe of the switch's ports and capabilities:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 77.22362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 852 120 re B*
Q
q
BT 1 0 0 1 0 98 Tm 12 TL /F3 10 Tf 0 0 0 rg (rconn|INFO|br0) Tj (<) Tj (-) Tj (>) Tj (tcp:127.0.0.1:6653: connecting...) Tj T* (vconn|DBG|tcp:127.0.0.1:6653: sent \(Success\): OFPT_HELLO \(OF1.4\) \(xid=0x1\):) Tj T* ( version bitmap: 0x01, 0x02, 0x03, 0x04, 0x05) Tj T* (vconn|DBG|tcp:127.0.0.1:6653: received: OFPT_HELLO \(OF1.3\) \(xid=0x2f24810a\):) Tj T* ( version bitmap: 0x01, 0x02, 0x03, 0x04) Tj T* (vconn|DBG|tcp:127.0.0.1:6653: negotiated OpenFlow version 0x04 \(we support version 0x05 and earlier, peer supports version 0x04 and earlier\)) Tj T* (rconn|INFO|br0) Tj (<) Tj (-) Tj (>) Tj (tcp:127.0.0.1:6653: connected) Tj T* (vconn|DBG|tcp:127.0.0.1:6653: received: OFPT_ECHO_REQUEST \(OF1.3\) \(xid=0x2f24810b\): 0 bytes of payload) Tj T* (vconn|DBG|tcp:127.0.0.1:6653: sent \(Success\): OFPT_ECHO_REPLY \(OF1.3\) \(xid=0x2f24810b\): 0 bytes of payload) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
62 0 obj
<< /Length 4649 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 391.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 690 372 re B*
Q
q
BT 1 0 0 1 0 350 Tm 12 TL /F3 10 Tf 0 0 0 rg (vconn|DBG|tcp:127.0.0.1:6653: received: OFPT_FEATURES_REQUEST \(OF1.3\) \(xid=0x2f24810c\):) Tj T* (vconn|DBG|tcp:127.0.0.1:6653: sent \(Success\): OFPT_FEATURES_REPLY \(OF1.3\) \(xid=0x2f24810c\): dpid:0000000000000001) Tj T* ( n_tables:254, n_buffers:0) Tj T* ( capabilities: FLOW_STATS TABLE_STATS PORT_STATS GROUP_STATS QUEUE_STATS) Tj T* (vconn|DBG|tcp:127.0.0.1:6653: received: OFPST_PORT_DESC request \(OF1.3\) \(xid=0x2f24810d\): port=ANY) Tj T* (vconn|DBG|tcp:127.0.0.1:6653: sent \(Success\): OFPST_PORT_DESC reply \(OF1.3\) \(xid=0x2f24810d\):) Tj T* ( 1\(p1\): addr:aa:55:aa:55:00:14) Tj T* (     config:     PORT_DOWN) Tj T* (     state:      LINK_DOWN) Tj T* (     speed: 0 Mbps now, 0 Mbps max) Tj T* ( 2\(p2\): addr:aa:55:aa:55:00:15) Tj T* (     config:     PORT_DOWN) Tj T* (     state:      LINK_DOWN) Tj T* (     speed: 0 Mbps now, 0 Mbps max) Tj T* ( 3\(p3\): addr:aa:55:aa:55:00:16) Tj T* (     config:     PORT_DOWN) Tj T* (     state:      LINK_DOWN) Tj T* (     speed: 0 Mbps now, 0 Mbps max) Tj T* ( 4\(p4\): addr:aa:55:aa:55:00:17) Tj T* (     config:     PORT_DOWN) Tj T* (     state:      LINK_DOWN) Tj T* (     speed: 0 Mbps now, 0 Mbps max) Tj T* ( 5\(p5\): addr:aa:55:aa:55:00:18) Tj T* (     config:     PORT_DOWN) Tj T* (     state:      LINK_DOWN) Tj T* (     speed: 0 Mbps now, 0 Mbps max) Tj T* ( LOCAL\(br0\): addr:c6:64:ff:59:48:41) Tj T* (     config:     PORT_DOWN) Tj T* (     state:      LINK_DOWN) Tj T* (     speed: 0 Mbps now, 0 Mbps max) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 371.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (After that, you can see Faucet delete all existing flows and then start adding new ones:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 278.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 876 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F3 10 Tf 12 TL (vconn|DBG|tcp:127.0.0.1:6653: received: OFPT_FLOW_MOD \(OF1.3\) \(xid=0x2f24810e\): DEL table:255 priority=0 actions=drop) Tj T* (vconn|DBG|tcp:127.0.0.1:6653: received: OFPT_BARRIER_REQUEST \(OF1.3\) \(xid=0x2f24810f\):) Tj T* (vconn|DBG|tcp:127.0.0.1:6653: sent \(Success\): OFPT_BARRIER_REPLY \(OF1.3\) \(xid=0x2f24810f\):) Tj T* (vconn|DBG|tcp:127.0.0.1:6653: received: OFPT_FLOW_MOD \(OF1.3\) \(xid=0x2f248110\): ADD priority=0 cookie:0x5adc15c0 out_port:0 actions=drop) Tj T* (vconn|DBG|tcp:127.0.0.1:6653: received: OFPT_FLOW_MOD \(OF1.3\) \(xid=0x2f248111\): ADD table:1 priority=0 cookie:0x5adc15c0 out_port:0 actions=drop) Tj T* (...) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 248.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (OpenFlow Layer) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 206.6236 cm
q
BT 1 0 0 1 0 26 Tm .112262 Tw 12 TL /F1 10 Tf 0 0 0 rg (Let's take a look at the OpenFlow tables that Faucet set up. Before we do that, it's helpful to take a look at) Tj T* 0 Tw .073059 Tw /F3 10 Tf 0 0 0 rg (docs/architecture.rst ) Tj /F1 10 Tf 0 0 0 rg (in the Faucet documentation to learn how Faucet structures its flow tables. In) Tj T* 0 Tw (summary, this document says:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 190.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Table 0) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 175.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Port-based ACLs) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 159.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Table 1) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 144.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Ingress VLAN processing) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 128.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Table 2) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 113.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (VLAN-based ACLs) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 97.62362 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Table 3) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 82.62362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Ingress L2 processing, MAC learning) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
63 0 obj
<< /Length 5697 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 753.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Table 4) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 738.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (L3 forwarding for IPv4) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 722.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Table 5) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 707.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (L3 forwarding for IPv6) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 691.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Table 6) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 676.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Virtual IP processing, e.g. for router IP addresses implemented by Faucet) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 660.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Table 7) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 645.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Egress L2 processing) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 629.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Table 8) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 614.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Flooding) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 584.0236 cm
q
BT 1 0 0 1 0 14 Tm 7.15686 Tw 12 TL /F1 10 Tf 0 0 0 rg (With that in mind, let's dump the flow tables. The simplest way is to just run plain) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (ovs-ofctl) Tj ( ) Tj (dump-flows) Tj /F1 10 Tf 0 0 0 rg (:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 550.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ ovs-ofctl dump-flows br0) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 482.8236 cm
q
BT 1 0 0 1 0 50 Tm 1.038488 Tw 12 TL /F1 10 Tf 0 0 0 rg (If you run that bare command, it produces a lot of extra junk that makes the output harder to read, like) Tj T* 0 Tw .359984 Tw (statistics and "cookie" values that are all the same. In addition, for historical reasons ) Tj /F3 10 Tf 0 0 0 rg (ovs-ofctl ) Tj /F1 10 Tf 0 0 0 rg (always) Tj T* 0 Tw .755318 Tw (defaults to using OpenFlow 1.0 even though Faucet and most modern controllers use OpenFlow 1.3, so) Tj T* 0 Tw .12749 Tw (it's best to force it to use OpenFlow 1.3. We could throw in a lot of options to fix these, but we'll want to do) Tj T* 0 Tw (this more than once, so let's start by defining a shell function for ourselves:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 413.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F3 10 Tf 12 TL ($ dump-flows \(\) {) Tj T* (  ovs-ofctl -OOpenFlow13 --names --no-stat dump-flows "$@" \\) Tj T* (    | sed 's/cookie=0x5adc15c0, //') Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 393.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Let's also define ) Tj /F3 10 Tf 0 0 0 rg (save-flows ) Tj /F1 10 Tf 0 0 0 rg (and ) Tj /F3 10 Tf 0 0 0 rg (diff-flows ) Tj /F1 10 Tf 0 0 0 rg (functions for later use:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 300.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F3 10 Tf 12 TL ($ save-flows \(\) {) Tj T* (  ovs-ofctl -OOpenFlow13 --no-names --sort dump-flows "$@") Tj T* (}) Tj T* ($ diff-flows \(\) {) Tj T* (  ovs-ofctl -OOpenFlow13 diff-flows "$@" | sed 's/cookie=0x5adc15c0 //') Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 280.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Now let's take a look at the flows we've got and what they mean, like this:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 247.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ dump-flows br0) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 215.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .478935 Tw (First, table 0 has a flow that just jumps to table 1 for each configured port, and drops other unrecognized) Tj T* 0 Tw (packets. Presumably it will do more if we configured port-based ACLs:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 122.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F3 10 Tf 12 TL (priority=9099,in_port=p1 actions=goto_table:1) Tj T* (priority=9099,in_port=p2 actions=goto_table:1) Tj T* (priority=9099,in_port=p3 actions=goto_table:1) Tj T* (priority=9099,in_port=p4 actions=goto_table:1) Tj T* (priority=9099,in_port=p5 actions=goto_table:1) Tj T* (priority=0 actions=drop) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 90.02362 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.194985 Tw (Table 1, for ingress VLAN processing, has a bunch of flows that drop inappropriate packets, like those) Tj T* 0 Tw (that claim to be from a broadcast source address \(why not from all multicast source addresses, though?\):) Tj T* ET
Q
Q
 
endstream
endobj
64 0 obj
<< /Length 5826 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 691.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F3 10 Tf 12 TL (table=1, priority=9099,dl_src=ff:ff:ff:ff:ff:ff actions=drop) Tj T* (table=1, priority=9001,dl_src=0e:00:00:00:00:01 actions=drop) Tj T* (table=1, priority=9099,dl_dst=01:80:c2:00:00:00 actions=drop) Tj T* (table=1, priority=9099,dl_dst=01:00:0c:cc:cc:cd actions=drop) Tj T* (table=1, priority=9099,dl_type=0x88cc actions=drop) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 623.8236 cm
q
BT 1 0 0 1 0 50 Tm .667045 Tw 12 TL /F1 10 Tf 0 0 0 rg (Table 1 also has some more interesting flows that recognize packets without a VLAN header on each of) Tj T* 0 Tw .352126 Tw (our ports \() Tj /F3 10 Tf 0 0 0 rg (vlan_tci=0x0000/0x1fff) Tj /F1 10 Tf 0 0 0 rg (\), push on the VLAN configured for the port, and proceed to table) Tj T* 0 Tw .92881 Tw (3. Presumably these skip table 2 because we did not configure any VLAN-based ACLs. There is also a) Tj T* 0 Tw 1.452339 Tw (fallback flow to drop other packets, which in practice means that if any received packet already has a) Tj T* 0 Tw (VLAN header then it will be dropped:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 530.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 726 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F3 10 Tf 0 0 0 rg (table=1, priority=9000,in_port=p1,vlan_tci=0x0000/0x1fff actions=push_vlan:0x8100,set_field:4196-) Tj (>) Tj (vlan_vid,goto_table:3) Tj T* (table=1, priority=9000,in_port=p2,vlan_tci=0x0000/0x1fff actions=push_vlan:0x8100,set_field:4196-) Tj (>) Tj (vlan_vid,goto_table:3) Tj T* (table=1, priority=9000,in_port=p3,vlan_tci=0x0000/0x1fff actions=push_vlan:0x8100,set_field:4196-) Tj (>) Tj (vlan_vid,goto_table:3) Tj T* (table=1, priority=9000,in_port=p4,vlan_tci=0x0000/0x1fff actions=push_vlan:0x8100,set_field:4296-) Tj (>) Tj (vlan_vid,goto_table:3) Tj T* (table=1, priority=9000,in_port=p5,vlan_tci=0x0000/0x1fff actions=push_vlan:0x8100,set_field:4296-) Tj (>) Tj (vlan_vid,goto_table:3) Tj T* (table=1, priority=0 actions=drop) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 510.6236 cm
Q
q
1 0 0 1 62.69291 415.6236 cm
.960784 .960784 .862745 rg
n 0 95 469.8898 -95 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 69 Tm  T* ET
q
1 0 0 1 16 64 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F4 12.5 Tf 15 TL (Note) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
BT 1 0 0 1 0 26 Tm .864418 Tw 12 TL /F1 10 Tf 0 0 0 rg (The syntax ) Tj /F3 10 Tf 0 0 0 rg (set_field:4196-) Tj (>) Tj (vlan_vid ) Tj /F1 10 Tf 0 0 0 rg (is curious and somewhat misleading. OpenFlow 1.3) Tj T* 0 Tw .212488 Tw (defines the ) Tj /F3 10 Tf 0 0 0 rg (vlan_vid ) Tj /F1 10 Tf 0 0 0 rg (field as a 13-bit field where bit 12 is set to 1 if the VLAN header is present.) Tj T* 0 Tw (Thus, since 4196 is 0x1064, this action sets VLAN value 0x64, which in decimal is 100.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 95 m 469.8898 95 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 95 l S
n 469.8898 0 m 469.8898 95 l S
Q
Q
q
1 0 0 1 62.69291 409.6236 cm
Q
q
1 0 0 1 62.69291 391.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Table 2 isn't used because there are no VLAN-based ACLs. It just has a drop flow:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 358.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (table=2, priority=0 actions=drop) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 326.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.160542 Tw (Table 3 is used for MAC learning but the controller hasn't learned any MAC yet. We'll come back here) Tj T* 0 Tw (later:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 281.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL (table=3, priority=0 actions=drop) Tj T* (table=3, priority=9000 actions=CONTROLLER:96,goto_table:7) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 261.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Tables 4, 5, and 6 aren't used because we haven't configured any routing:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 204.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL (table=4, priority=0 actions=drop) Tj T* (table=5, priority=0 actions=drop) Tj T* (table=6, priority=0 actions=drop) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 172.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.403672 Tw (Table 7 is used to direct packets to learned MACs but Faucet hasn't learned any MACs yet, so it just) Tj T* 0 Tw (sends all the packets along to table 8:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 126.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL (table=7, priority=0 actions=drop) Tj T* (table=7, priority=9000 actions=goto_table:8) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 82.82362 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.682651 Tw (Table 8 implements flooding, broadcast, and multicast. The flows for broadcast and flood are easy to) Tj T* 0 Tw .166655 Tw (understand: if the packet came in on a given port and needs to be flooded or broadcast, output it to all the) Tj T* 0 Tw (other ports in the same VLAN:) Tj T* ET
Q
Q
 
endstream
endobj
65 0 obj
<< /Length 6037 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 631.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 654 132 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 110 Tm /F3 10 Tf 12 TL (table=8, priority=9008,in_port=p1,dl_vlan=100,dl_dst=ff:ff:ff:ff:ff:ff actions=pop_vlan,output:p2,output:p3) Tj T* (table=8, priority=9008,in_port=p2,dl_vlan=100,dl_dst=ff:ff:ff:ff:ff:ff actions=pop_vlan,output:p1,output:p3) Tj T* (table=8, priority=9008,in_port=p3,dl_vlan=100,dl_dst=ff:ff:ff:ff:ff:ff actions=pop_vlan,output:p1,output:p2) Tj T* (table=8, priority=9008,in_port=p4,dl_vlan=200,dl_dst=ff:ff:ff:ff:ff:ff actions=pop_vlan,output:p5) Tj T* (table=8, priority=9008,in_port=p5,dl_vlan=200,dl_dst=ff:ff:ff:ff:ff:ff actions=pop_vlan,output:p4) Tj T* (table=8, priority=9000,in_port=p1,dl_vlan=100 actions=pop_vlan,output:p2,output:p3) Tj T* (table=8, priority=9000,in_port=p2,dl_vlan=100 actions=pop_vlan,output:p1,output:p3) Tj T* (table=8, priority=9000,in_port=p3,dl_vlan=100 actions=pop_vlan,output:p1,output:p2) Tj T* (table=8, priority=9000,in_port=p4,dl_vlan=200 actions=pop_vlan,output:p5) Tj T* (table=8, priority=9000,in_port=p5,dl_vlan=200 actions=pop_vlan,output:p4) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 611.8236 cm
Q
q
1 0 0 1 62.69291 445.6236 cm
.960784 .960784 .862745 rg
n 0 166.2 469.8898 -166.2 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 140.2 Tm  T* ET
q
1 0 0 1 16 135.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F4 12.5 Tf 15 TL (Note) Tj T* ET
Q
Q
q
1 0 0 1 16 87.2 cm
q
BT 1 0 0 1 0 26 Tm 3.069069 Tw 12 TL /F1 10 Tf 0 0 0 rg (These flows could apparently be simpler because OpenFlow says that ) Tj /F3 10 Tf 0 0 0 rg (output:) Tj (<) Tj (port) Tj (> ) Tj /F1 10 Tf 0 0 0 rg (is) Tj T* 0 Tw .807485 Tw (ignored if ) Tj /F3 10 Tf 0 0 0 rg (<) Tj (port) Tj (> ) Tj /F1 10 Tf 0 0 0 rg (is the input port. That means that the first three flows above could apparently) Tj T* 0 Tw (be collapsed into just:) Tj T* ET
Q
Q
q
1 0 0 1 16 54 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 648 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (table=8, priority=9008,dl_vlan=100,dl_dst=ff:ff:ff:ff:ff:ff actions=pop_vlan,output:p1,output:p2,output:p3) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 16 16 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.896235 Tw (There might be some reason why this won't work or isn't practical, but that isn't obvious from) Tj T* 0 Tw (looking at the flow table.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 166.2 m 469.8898 166.2 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 166.2 l S
n 469.8898 0 m 469.8898 166.2 l S
Q
Q
q
1 0 0 1 62.69291 439.6236 cm
Q
q
1 0 0 1 62.69291 421.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There are also some flows for handling some standard forms of multicast, and a fallback drop flow:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 208.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 762 204 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 182 Tm /F3 10 Tf 12 TL (table=8, priority=9006,in_port=p1,dl_vlan=100,dl_dst=33:33:00:00:00:00/ff:ff:00:00:00:00 actions=pop_vlan,output:p2,output:p3) Tj T* (table=8, priority=9006,in_port=p2,dl_vlan=100,dl_dst=33:33:00:00:00:00/ff:ff:00:00:00:00 actions=pop_vlan,output:p1,output:p3) Tj T* (table=8, priority=9006,in_port=p3,dl_vlan=100,dl_dst=33:33:00:00:00:00/ff:ff:00:00:00:00 actions=pop_vlan,output:p1,output:p2) Tj T* (table=8, priority=9006,in_port=p4,dl_vlan=200,dl_dst=33:33:00:00:00:00/ff:ff:00:00:00:00 actions=pop_vlan,output:p5) Tj T* (table=8, priority=9006,in_port=p5,dl_vlan=200,dl_dst=33:33:00:00:00:00/ff:ff:00:00:00:00 actions=pop_vlan,output:p4) Tj T* (table=8, priority=9002,in_port=p1,dl_vlan=100,dl_dst=01:80:c2:00:00:00/ff:ff:ff:00:00:00 actions=pop_vlan,output:p2,output:p3) Tj T* (table=8, priority=9002,in_port=p2,dl_vlan=100,dl_dst=01:80:c2:00:00:00/ff:ff:ff:00:00:00 actions=pop_vlan,output:p1,output:p3) Tj T* (table=8, priority=9002,in_port=p3,dl_vlan=100,dl_dst=01:80:c2:00:00:00/ff:ff:ff:00:00:00 actions=pop_vlan,output:p1,output:p2) Tj T* (table=8, priority=9004,in_port=p1,dl_vlan=100,dl_dst=01:00:5e:00:00:00/ff:ff:ff:00:00:00 actions=pop_vlan,output:p2,output:p3) Tj T* (table=8, priority=9004,in_port=p2,dl_vlan=100,dl_dst=01:00:5e:00:00:00/ff:ff:ff:00:00:00 actions=pop_vlan,output:p1,output:p3) Tj T* (table=8, priority=9004,in_port=p3,dl_vlan=100,dl_dst=01:00:5e:00:00:00/ff:ff:ff:00:00:00 actions=pop_vlan,output:p1,output:p2) Tj T* (table=8, priority=9002,in_port=p4,dl_vlan=200,dl_dst=01:80:c2:00:00:00/ff:ff:ff:00:00:00 actions=pop_vlan,output:p5) Tj T* (table=8, priority=9002,in_port=p5,dl_vlan=200,dl_dst=01:80:c2:00:00:00/ff:ff:ff:00:00:00 actions=pop_vlan,output:p4) Tj T* (table=8, priority=9004,in_port=p4,dl_vlan=200,dl_dst=01:00:5e:00:00:00/ff:ff:ff:00:00:00 actions=pop_vlan,output:p5) Tj T* (table=8, priority=9004,in_port=p5,dl_vlan=200,dl_dst=01:00:5e:00:00:00/ff:ff:ff:00:00:00 actions=pop_vlan,output:p4) Tj T* (table=8, priority=0 actions=drop) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 178.4236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Tracing) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 124.4236 cm
q
BT 1 0 0 1 0 38 Tm 1.991654 Tw 12 TL /F1 10 Tf 0 0 0 rg (Let's go a level deeper. So far, everything we've done has been fairly general. We can also look at) Tj T* 0 Tw .396235 Tw (something more specific: the path that a particular packet would take through Open vSwitch. We can use) Tj T* 0 Tw .131984 Tw (OVN ) Tj /F3 10 Tf 0 0 0 rg (ofproto/trace ) Tj /F1 10 Tf 0 0 0 rg (command to play "what-if?" games. This command is one that we send directly to) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (ovs-vswitchd) Tj /F1 10 Tf 0 0 0 rg (, using the ) Tj /F3 10 Tf 0 0 0 rg (ovs-appctl ) Tj /F1 10 Tf 0 0 0 rg (utility.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 112.4236 cm
Q
 
endstream
endobj
66 0 obj
<< /Length 4785 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 682.0236 cm
.960784 .960784 .862745 rg
n 0 83 469.8898 -83 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 57 Tm  T* ET
q
1 0 0 1 16 52 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F4 12.5 Tf 15 TL (Note) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
BT 1 0 0 1 0 14 Tm 1.880751 Tw 12 TL /F3 10 Tf 0 0 0 rg (ovs-appctl ) Tj /F1 10 Tf 0 0 0 rg (is actually a very simple-minded JSON-RPC client, so you could also use some) Tj T* 0 Tw (other utility that speaks JSON-RPC, or access it from a program as an API.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 83 m 469.8898 83 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 83 l S
n 469.8898 0 m 469.8898 83 l S
Q
Q
q
1 0 0 1 62.69291 676.0236 cm
Q
q
1 0 0 1 62.69291 622.0236 cm
q
BT 1 0 0 1 0 38 Tm .198221 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf 0 0 0 rg (ovs-vswitchd) Tj /F1 10 Tf 0 0 0 rg (\(8\) manpage has a lot of detail on how to use ) Tj /F3 10 Tf 0 0 0 rg (ofproto/trace) Tj /F1 10 Tf 0 0 0 rg (, but let's just start by) Tj T* 0 Tw 1.027045 Tw (building up from a simple example. You can start with a command that just specifies the datapath \(e.g.) Tj T* 0 Tw .324987 Tw /F3 10 Tf 0 0 0 rg (br0) Tj /F1 10 Tf 0 0 0 rg (\), an input port, and nothing else; unspecified fields default to all-zeros. Let's look at the full output for) Tj T* 0 Tw (this trivial example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 288.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 708 324 re B*
Q
q
BT 1 0 0 1 0 302 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ ovs-appctl ofproto/trace br0 in_port=p1) Tj T* (Flow: in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000) Tj T*  T* (bridge\("br0"\)) Tj T* (-------------) Tj T* ( 0. in_port=1, priority 9099, cookie 0x5adc15c0) Tj T* (    goto_table:1) Tj T* ( 1. in_port=1,vlan_tci=0x0000/0x1fff, priority 9000, cookie 0x5adc15c0) Tj T* (    push_vlan:0x8100) Tj T* (    set_field:4196-) Tj (>) Tj (vlan_vid) Tj T* (    goto_table:3) Tj T* ( 3. priority 9000, cookie 0x5adc15c0) Tj T* (    CONTROLLER:96) Tj T* (    goto_table:7) Tj T* ( 7. priority 9000, cookie 0x5adc15c0) Tj T* (    goto_table:8) Tj T* ( 8. in_port=1,dl_vlan=100, priority 9000, cookie 0x5adc15c0) Tj T* (    pop_vlan) Tj T* (    output:2) Tj T* (    output:3) Tj T*  T* (Final flow: unchanged) Tj T* (Megaflow: recirc_id=0,eth,in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000) Tj T* (Datapath actions: push_vlan\(vid=100,pcp=0\),pop_vlan,2,3) Tj T* (This flow is handled by the userspace slow path because it:) Tj T* (        - Sends "packet-in" messages to the OpenFlow controller.) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 256.8236 cm
q
BT 1 0 0 1 0 14 Tm .602927 Tw 12 TL /F1 10 Tf 0 0 0 rg (The first line of output, beginning with ) Tj /F3 10 Tf 0 0 0 rg (Flow:) Tj /F1 10 Tf 0 0 0 rg (, just repeats our request in a more verbose form, including) Tj T* 0 Tw (the L2 fields that were zeroed.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 190.8236 cm
q
BT 1 0 0 1 0 50 Tm 2.148443 Tw 12 TL /F1 10 Tf 0 0 0 rg (Each of the numbered items under ) Tj /F3 10 Tf 0 0 0 rg (bridge\("br0"\) ) Tj /F1 10 Tf 0 0 0 rg (shows what would happen to our hypothetical) Tj T* 0 Tw .427488 Tw (packet in the table with the given number. For example, we see in table 1 that the packet matches a flow) Tj T* 0 Tw 1.146179 Tw (that push on a VLAN header, set the VLAN ID to 100, and goes on to further processing in table 3. In) Tj T* 0 Tw .342988 Tw (table 3, the packet gets sent to the controller to allow MAC learning to take place, and then table 8 floods) Tj T* 0 Tw (the packet to the other ports in the same VLAN.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 112.8236 cm
q
BT 1 0 0 1 0 62 Tm .083828 Tw 12 TL /F1 10 Tf 0 0 0 rg (Summary information follows the numbered tables. The packet hasn't been changed \(overall, even though) Tj T* 0 Tw .713318 Tw (a VLAN was pushed and then popped back off\) since ingress, hence ) Tj /F3 10 Tf 0 0 0 rg (Final) Tj ( ) Tj (flow:) Tj ( ) Tj (unchanged) Tj /F1 10 Tf 0 0 0 rg (. We'll) Tj T* 0 Tw 2.44498 Tw (look at the ) Tj /F3 10 Tf 0 0 0 rg (Megaflow ) Tj /F1 10 Tf 0 0 0 rg (information later. The ) Tj /F3 10 Tf 0 0 0 rg (Datapath) Tj ( ) Tj (actions ) Tj /F1 10 Tf 0 0 0 rg (summarize what would actually) Tj T* 0 Tw .406655 Tw (happen to such a packet. Finally, the note at the end gives a hint that this flow would not perform well for) Tj T* 0 Tw .802209 Tw (large volumes of traffic, because it has to be handled in the switch's slow path since it sends OpenFlow) Tj T* 0 Tw (messages to the controller.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 100.8236 cm
Q
 
endstream
endobj
67 0 obj
<< /Length 5994 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 670.0236 cm
.960784 .960784 .862745 rg
n 0 95 469.8898 -95 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 69 Tm  T* ET
q
1 0 0 1 16 64 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F4 12.5 Tf 15 TL (Note) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.626651 Tw (This performance limitation is probably not problematic in this case because it is only used for) Tj T* 0 Tw 1.287126 Tw (MAC learning, so that most packets won't encounter it. However, the Open vSwitch 2.9 release) Tj T* 0 Tw (\(which is upcoming as of this writing\) will likely remove this performance limitation anyway.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 95 m 469.8898 95 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 95 l S
n 469.8898 0 m 469.8898 95 l S
Q
Q
q
1 0 0 1 62.69291 664.0236 cm
Q
q
1 0 0 1 62.69291 634.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Triggering MAC Learning) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 592.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.636098 Tw (We just saw how a packet gets sent to the controller to trigger MAC learning. Let's actually send the) Tj T* 0 Tw .441988 Tw (packet and see what happens. But before we do that, let's save a copy of the current flow tables for later) Tj T* 0 Tw (comparison:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 558.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ save-flows br0 ) Tj (>) Tj ( flows1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 514.8236 cm
q
BT 1 0 0 1 0 26 Tm 2.115318 Tw 12 TL /F1 10 Tf 0 0 0 rg (Now use ) Tj /F3 10 Tf 0 0 0 rg (ofproto/trace) Tj /F1 10 Tf 0 0 0 rg (, as before, with a few new twists: we specify the source and destination) Tj T* 0 Tw .672485 Tw (Ethernet addresses and append the ) Tj /F3 10 Tf 0 0 0 rg (-generate ) Tj /F1 10 Tf 0 0 0 rg (option so that side effects like sending a packet to the) Tj T* 0 Tw (controller actually happen:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 481.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 618 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ ovs-appctl ofproto/trace br0 in_port=p1,dl_src=00:11:11:00:00:00,dl_dst=00:22:22:00:00:00 -generate) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 437.6236 cm
q
BT 1 0 0 1 0 26 Tm 4.302765 Tw 12 TL /F1 10 Tf 0 0 0 rg (The output is almost identical to that before, so it is not repeated here. But, take a look at) Tj T* 0 Tw .53832 Tw /F3 10 Tf 0 0 0 rg (inst/faucet.log ) Tj /F1 10 Tf 0 0 0 rg (now. It should now include a line at the end that says that it learned about our MAC) Tj T* 0 Tw (00:11:11:00:00:00, like this:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 404.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 696 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (Oct 15 01:16:23 faucet.valve INFO     DPID 1 \(0x1\) learned 00:11:11:00:00:00 on Port 1 on VLAN 100 \(1 hosts total\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 384.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Now compare the flow tables that we saved to the current ones:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 351.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (diff-flows flows1 br0) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 331.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The result should look like this, showing new flows for the learned MACs:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 286.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 774 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL (+table=3 priority=9098,in_port=p1,dl_vlan=100,dl_src=00:11:11:00:00:00 cookie=0x5adc15c0 hard_timeout=3601 actions=resubmit\(,7\)) Tj T* (+table=7 priority=9099,dl_vlan=100,dl_dst=00:11:11:00:00:00 cookie=0x5adc15c0 idle_timeout=3601 actions=strip_vlan,output:p1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 254.0236 cm
q
BT 1 0 0 1 0 14 Tm .32881 Tw 12 TL /F1 10 Tf 0 0 0 rg (To demonstrate the usefulness of the learned MAC, try tracing \(with side effects\) a packet arriving on ) Tj /F3 10 Tf 0 0 0 rg (p2) Tj T* 0 Tw /F1 10 Tf 0 0 0 rg (\(or ) Tj /F3 10 Tf 0 0 0 rg (p3) Tj /F1 10 Tf 0 0 0 rg (\) and destined to the address learned on ) Tj /F3 10 Tf 0 0 0 rg (p1) Tj /F1 10 Tf 0 0 0 rg (, like this:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 220.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 618 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ ovs-appctl ofproto/trace br0 in_port=p2,dl_src=00:22:22:00:00:00,dl_dst=00:11:11:00:00:00 -generate) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 188.8236 cm
q
BT 1 0 0 1 0 14 Tm .261488 Tw 12 TL /F1 10 Tf 0 0 0 rg (The first time you run this command, you will notice that it sends the packet to the controller, to learn ) Tj /F3 10 Tf 0 0 0 rg (p2) Tj /F1 10 Tf 0 0 0 rg ('s) Tj T* 0 Tw (00:22:22:00:00:00 source address:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 83.62362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F3 10 Tf 0 0 0 rg (bridge\("br0"\)) Tj T* (-------------) Tj T* ( 0. in_port=2, priority 9099, cookie 0x5adc15c0) Tj T* (    goto_table:1) Tj T* ( 1. in_port=2,vlan_tci=0x0000/0x1fff, priority 9000, cookie 0x5adc15c0) Tj T* (    push_vlan:0x8100) Tj T* (    set_field:4196-) Tj (>) Tj (vlan_vid) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
68 0 obj
<< /Length 5111 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 667.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F3 10 Tf 0 0 0 rg (    goto_table:3) Tj T* ( 3. priority 9000, cookie 0x5adc15c0) Tj T* (    CONTROLLER:96) Tj T* (    goto_table:7) Tj T* ( 7. dl_vlan=100,dl_dst=00:11:11:00:00:00, priority 9099, cookie 0x5adc15c0) Tj T* (    pop_vlan) Tj T* (    output:1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 647.8236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (If you check ) Tj /F3 10 Tf 0 0 0 rg (inst/faucet.log) Tj /F1 10 Tf 0 0 0 rg (, you can see that ) Tj /F3 10 Tf 0 0 0 rg (p2) Tj /F1 10 Tf 0 0 0 rg ('s MAC has been learned too:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 614.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 696 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (Oct 15 01:24:01 faucet.valve INFO     DPID 1 \(0x1\) learned 00:22:22:00:00:00 on Port 2 on VLAN 100 \(2 hosts total\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 594.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Similarly for ) Tj /F3 10 Tf 0 0 0 rg (diff-flows) Tj /F1 10 Tf 0 0 0 rg (:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 513.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 774 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F3 10 Tf 12 TL ($ diff-flows flows1 br0) Tj T* (+table=3 priority=9098,in_port=p1,dl_vlan=100,dl_src=00:11:11:00:00:00 cookie=0x5adc15c0 hard_timeout=3601 actions=resubmit\(,7\)) Tj T* (+table=3 priority=9098,in_port=p2,dl_vlan=100,dl_src=00:22:22:00:00:00 cookie=0x5adc15c0 hard_timeout=3604 actions=resubmit\(,7\)) Tj T* (+table=7 priority=9099,dl_vlan=100,dl_dst=00:11:11:00:00:00 cookie=0x5adc15c0 idle_timeout=3601 actions=strip_vlan,output:p1) Tj T* (+table=7 priority=9099,dl_vlan=100,dl_dst=00:22:22:00:00:00 cookie=0x5adc15c0 idle_timeout=3604 actions=strip_vlan,output:p2) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 481.4236 cm
q
BT 1 0 0 1 0 14 Tm .487318 Tw 12 TL /F1 10 Tf 0 0 0 rg (Then, if you re-run either of the ) Tj /F3 10 Tf 0 0 0 rg (ofproto/trace ) Tj /F1 10 Tf 0 0 0 rg (commands \(with or without ) Tj /F3 10 Tf 0 0 0 rg (-generate) Tj /F1 10 Tf 0 0 0 rg (\), you can see) Tj T* 0 Tw (that the packets go back and forth without any further MAC learning, e.g.:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 232.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 750 240 re B*
Q
q
BT 1 0 0 1 0 218 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ ovs-appctl ofproto/trace br0 in_port=p2,dl_src=00:22:22:00:00:00,dl_dst=00:11:11:00:00:00 -generate) Tj T* (Flow: in_port=2,vlan_tci=0x0000,dl_src=00:22:22:00:00:00,dl_dst=00:11:11:00:00:00,dl_type=0x0000) Tj T*  T* (bridge\("br0"\)) Tj T* (-------------) Tj T* ( 0. in_port=2, priority 9099, cookie 0x5adc15c0) Tj T* (    goto_table:1) Tj T* ( 1. in_port=2,vlan_tci=0x0000/0x1fff, priority 9000, cookie 0x5adc15c0) Tj T* (    push_vlan:0x8100) Tj T* (    set_field:4196-) Tj (>) Tj (vlan_vid) Tj T* (    goto_table:3) Tj T* ( 3. in_port=2,dl_vlan=100,dl_src=00:22:22:00:00:00, priority 9098, cookie 0x5adc15c0) Tj T* (    goto_table:7) Tj T* ( 7. dl_vlan=100,dl_dst=00:11:11:00:00:00, priority 9099, cookie 0x5adc15c0) Tj T* (    pop_vlan) Tj T* (    output:1) Tj T*  T* (Final flow: unchanged) Tj T* (Megaflow: recirc_id=0,eth,in_port=2,vlan_tci=0x0000/0x1fff,dl_src=00:22:22:00:00:00,dl_dst=00:11:11:00:00:00,dl_type=0x0000) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 202.2236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Performance) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 148.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .554985 Tw (We've already seen one factor that can be important for performance: Open vSwitch forces any flow that) Tj T* 0 Tw .151751 Tw (sends a packet to an OpenFlow controller into its "slow path", which means that processing packets in the) Tj T* 0 Tw 1.603984 Tw (flow will be orders of magnitude slower than otherwise. This distinction between "slow path" and "fast) Tj T* 0 Tw (path" is the key to making sure that Open vSwitch performs as fast as possible.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 82.22362 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .565988 Tw (In addition to sending packets to a controller, some other factors can force a flow or a packet to take the) Tj T* 0 Tw 1.388221 Tw (slow path. As one example, all CFM, BFD, LACP, STP, and LLDP processing takes place in the slow) Tj T* 0 Tw 3.469269 Tw (path, in the cases where Open vSwitch processes these protocols itself instead of delegating to) Tj T* 0 Tw .57311 Tw (controller-written flows. As a second example, any flow that modifies ARP fields is processed in the slow) Tj T* 0 Tw .497318 Tw (path. These are corner cases that are unlikely to cause performance problems in practice because these) Tj T* 0 Tw ET
Q
Q
 
endstream
endobj
69 0 obj
<< /Length 6441 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .405868 Tw (protocols send packets at a relatively slow rate, and users and controller authors do not normally need to) Tj T* 0 Tw (be concerned about them.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 639.0236 cm
q
BT 1 0 0 1 0 86 Tm .256235 Tw 12 TL /F1 10 Tf 0 0 0 rg (To understand what cases users and controller authors should consider, we need to talk about how Open) Tj T* 0 Tw .535697 Tw (vSwitch optimizes for performance. The Open vSwitch code is divided into two major components which,) Tj T* 0 Tw 2.29436 Tw (as already mentioned, are called the "slow path" and "fast path" \(aka "datapath"\). The slow path is) Tj T* 0 Tw 3.297126 Tw (embedded in the ) Tj /F3 10 Tf 0 0 0 rg (ovs-vswitchd ) Tj /F1 10 Tf 0 0 0 rg (userspace program. It is the part of the Open vSwitch packet) Tj T* 0 Tw .633516 Tw (processing logic that understands OpenFlow. Its job is to take a packet and run it through the OpenFlow) Tj T* 0 Tw 1.328409 Tw (tables to determine what should happen to it. It outputs a list of actions in a form similar to OpenFlow) Tj T* 0 Tw 1.418735 Tw (actions but simpler, called "ODP actions" or "datapath actions". It then passes the ODP actions to the) Tj T* 0 Tw (datapath, which applies them to the packet.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 627.0236 cm
Q
q
1 0 0 1 62.69291 544.0236 cm
.960784 .960784 .862745 rg
n 0 83 469.8898 -83 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 57 Tm  T* ET
q
1 0 0 1 16 52 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F4 12.5 Tf 15 TL (Note) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.024983 Tw (Open vSwitch contains a single slow path and multiple fast paths. The difference between using) Tj T* 0 Tw (Open vSwitch with the Linux kernel versus with DPDK is the datapath.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 83 m 469.8898 83 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 83 l S
n 469.8898 0 m 469.8898 83 l S
Q
Q
q
1 0 0 1 62.69291 538.0236 cm
Q
q
1 0 0 1 62.69291 496.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .227765 Tw (If every packet passed through the slow path and the fast path in this way, performance would be terrible.) Tj T* 0 Tw .239984 Tw (The key to getting high performance from this architecture is caching. Open vSwitch includes a multi-level) Tj T* 0 Tw (cache. It works like this:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 490.0236 cm
Q
q
1 0 0 1 62.69291 490.0236 cm
Q
q
1 0 0 1 62.69291 430.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .626235 Tw (A packet initially arrives at the datapath. Some datapaths \(such as DPDK and the in-tree version of) Tj T* 0 Tw .049984 Tw (the OVS kernel module\) have a first-level cache called the "microflow cache". The microflow cache is) Tj T* 0 Tw 2.890651 Tw (the key to performance for relatively long-lived, high packet rate flows. If the datapath has a) Tj T* 0 Tw .424692 Tw (microflow cache, then it consults it and, if there is a cache hit, the datapath executes the associated) Tj T* 0 Tw (actions. Otherwise, it proceeds to step 2.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 424.0236 cm
Q
q
1 0 0 1 62.69291 388.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .695366 Tw (The datapath consults its second-level cache, called the "megaflow cache". The megaflow cache is) Tj T* 0 Tw 1.452765 Tw (the key to performance for shorter or low packet rate flows. If there is a megaflow cache hit, the) Tj T* 0 Tw (datapath executes the associated actions. Otherwise, it proceeds to step 3.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 382.0236 cm
Q
q
1 0 0 1 62.69291 322.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .587633 Tw (The datapath passes the packet to the slow path, which runs it through the OpenFlow table to yield) Tj T* 0 Tw .791751 Tw (ODP actions, a process that is often called "flow translation". It then passes the packet back to the) Tj T* 0 Tw .03311 Tw (datapath to execute the actions and to, if possible, install a megaflow cache entry so that subsequent) Tj T* 0 Tw 1.008735 Tw (similar packets can be handled directly by the fast path. \(We already described above most of the) Tj T* 0 Tw (cases where a cache entry cannot be installed.\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 322.0236 cm
Q
q
1 0 0 1 62.69291 268.0236 cm
q
BT 1 0 0 1 0 38 Tm .11936 Tw 12 TL /F1 10 Tf 0 0 0 rg (The megaflow cache is the key cache to consider for performance tuning. Open vSwitch provides tools for) Tj T* 0 Tw .98498 Tw (understanding and optimizing its behavior. The ) Tj /F3 10 Tf 0 0 0 rg (ofproto/trace ) Tj /F1 10 Tf 0 0 0 rg (command that we have already been) Tj T* 0 Tw .615868 Tw (using is the most common tool for this use. Let's take another look at the most recent ) Tj /F3 10 Tf 0 0 0 rg (ofproto/trace) Tj T* 0 Tw /F1 10 Tf 0 0 0 rg (output:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 78.82362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 618 180 re B*
Q
q
BT 1 0 0 1 0 158 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ ovs-appctl ofproto/trace br0 in_port=p2,dl_src=00:22:22:00:00:00,dl_dst=00:11:11:00:00:00 -generate) Tj T* (Flow: in_port=2,vlan_tci=0x0000,dl_src=00:22:22:00:00:00,dl_dst=00:11:11:00:00:00,dl_type=0x0000) Tj T*  T* (bridge\("br0"\)) Tj T* (-------------) Tj T* ( 0. in_port=2, priority 9099, cookie 0x5adc15c0) Tj T* (    goto_table:1) Tj T* ( 1. in_port=2,vlan_tci=0x0000/0x1fff, priority 9000, cookie 0x5adc15c0) Tj T* (    push_vlan:0x8100) Tj T* (    set_field:4196-) Tj (>) Tj (vlan_vid) Tj T* (    goto_table:3) Tj T* ( 3. in_port=2,dl_vlan=100,dl_src=00:22:22:00:00:00, priority 9098, cookie 0x5adc15c0) Tj T* (    goto_table:7) Tj T* ( 7. dl_vlan=100,dl_dst=00:11:11:00:00:00, priority 9099, cookie 0x5adc15c0) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
70 0 obj
<< /Length 7397 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 691.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 750 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F3 10 Tf 0 0 0 rg (    pop_vlan) Tj T* (    output:1) Tj T*  T* (Final flow: unchanged) Tj T* (Megaflow: recirc_id=0,eth,in_port=2,vlan_tci=0x0000/0x1fff,dl_src=00:22:22:00:00:00,dl_dst=00:11:11:00:00:00,dl_type=0x0000) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 647.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.499987 Tw (This time, it's the last line that we're interested in. This line shows the entry that Open vSwitch would) Tj T* 0 Tw .049985 Tw (insert into the megaflow cache given the particular packet with the current flow tables. The megaflow entry) Tj T* 0 Tw (includes:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 641.8236 cm
Q
q
1 0 0 1 62.69291 641.8236 cm
Q
q
1 0 0 1 62.69291 629.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (recirc_id) Tj /F1 10 Tf 0 0 0 rg (. This is an implementation detail that users don't normally need to understand.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 623.8236 cm
Q
q
1 0 0 1 62.69291 599.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.812126 Tw 12 TL /F3 10 Tf 0 0 0 rg (eth) Tj /F1 10 Tf 0 0 0 rg (. This just indicates that the cache entry matches only Ethernet packets; Open vSwitch also) Tj T* 0 Tw (supports other types of packets, such as IP packets not encapsulated in Ethernet.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 593.8236 cm
Q
q
1 0 0 1 62.69291 445.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 133 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 133 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (All of the fields matched by any of the flows that the packet visited:) Tj T* ET
Q
Q
q
1 0 0 1 23 117 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (in_port) Tj T* ET
Q
Q
q
1 0 0 1 23 102 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In tables 0, 1, and 3.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 86 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (vlan_tci) Tj T* ET
Q
Q
q
1 0 0 1 23 59 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 14 Tm .323516 Tw 12 TL /F1 10 Tf 0 0 0 rg (In tables 1, 3, and 7 \() Tj /F3 10 Tf 0 0 0 rg (vlan_tci ) Tj /F1 10 Tf 0 0 0 rg (includes the VLAN ID and PCP fields and``dl_vlan`` is just the) Tj T* 0 Tw (VLAN ID\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 43 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (dl_src) Tj T* ET
Q
Q
q
1 0 0 1 23 28 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In table 3) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 12 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (dl_dst) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In table 7.) Tj T* ET
Q
Q
q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 439.8236 cm
Q
q
1 0 0 1 62.69291 415.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.841567 Tw (All of the fields matched by flows that had to be ruled out to ensure that the ones that actually) Tj T* 0 Tw (matched were the highest priority matching rules.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 415.8236 cm
Q
q
1 0 0 1 62.69291 373.8236 cm
q
BT 1 0 0 1 0 26 Tm .342651 Tw 12 TL /F1 10 Tf 0 0 0 rg (The last one is important. Notice how the megaflow matches on ) Tj /F3 10 Tf 0 0 0 rg (dl_type=0x0000) Tj /F1 10 Tf 0 0 0 rg (, even though none of) Tj T* 0 Tw 1.286235 Tw (the tables matched on ) Tj /F3 10 Tf 0 0 0 rg (dl_type ) Tj /F1 10 Tf 0 0 0 rg (\(the Ethernet type\). One reason is because of this flow in OpenFlow) Tj T* 0 Tw (table 1 \(which shows up in ) Tj /F3 10 Tf 0 0 0 rg (dump-flows ) Tj /F1 10 Tf 0 0 0 rg (output\):) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 340.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (table=1, priority=9099,dl_type=0x88cc actions=drop) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 296.6236 cm
q
BT 1 0 0 1 0 26 Tm .275227 Tw 12 TL /F1 10 Tf 0 0 0 rg (This flow has higher priority than the flow in table 1 that actually matched. This means that, to put it in the) Tj T* 0 Tw 2.136651 Tw (megaflow cache, ) Tj /F3 10 Tf 0 0 0 rg (ovs-vswitchd ) Tj /F1 10 Tf 0 0 0 rg (has to add a match on ) Tj /F3 10 Tf 0 0 0 rg (dl_type ) Tj /F1 10 Tf 0 0 0 rg (to ensure that the cache entry) Tj T* 0 Tw (doesn't match LLDP packets \(with Ethertype 0x88cc\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 284.6236 cm
Q
q
1 0 0 1 62.69291 189.6236 cm
.960784 .960784 .862745 rg
n 0 95 469.8898 -95 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 69 Tm  T* ET
q
1 0 0 1 16 64 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F4 12.5 Tf 15 TL (Note) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
BT 1 0 0 1 0 26 Tm .559269 Tw 12 TL /F1 10 Tf 0 0 0 rg (In fact, in some cases ) Tj /F3 10 Tf 0 0 0 rg (ovs-vswitchd ) Tj /F1 10 Tf 0 0 0 rg (matches on fields that aren't strictly required according to) Tj T* 0 Tw .683984 Tw (this description. ) Tj /F3 10 Tf 0 0 0 rg (dl_type ) Tj /F1 10 Tf 0 0 0 rg (is actually one of those, so deleting the LLDP flow probably would not) Tj T* 0 Tw (have any effect on the megaflow. But the principle here is sound.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 95 m 469.8898 95 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 95 l S
n 469.8898 0 m 469.8898 95 l S
Q
Q
q
1 0 0 1 62.69291 183.6236 cm
Q
q
1 0 0 1 62.69291 81.62362 cm
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F1 10 Tf 12 TL .583488 Tw (So why does any of this matter? It's because, the more specific a megaflow is, that is, the more fields or) Tj T* 0 Tw .292765 Tw (bits within fields that a megaflow matches, the less valuable it is from a caching viewpoint. A very specific) Tj T* 0 Tw .044692 Tw (megaflow might match on L2 and L3 addresses and L4 port numbers. When that happens, only packets in) Tj T* 0 Tw 3.906412 Tw (one \(half-\)connection match the megaflow. If that connection has only a few packets, as many) Tj T* 0 Tw .907209 Tw (connections do, then the high cost of the slow path translation is amortized over only a few packets, so) Tj T* 0 Tw 1.030542 Tw (the average cost of forwarding those packets is high. On the other hand, if a megaflow only matches a) Tj T* 0 Tw 1.778221 Tw (relatively small number of L2 and L3 packets, then the cache entry can potentially be used by many) Tj T* 0 Tw (individual connections, and the average cost is low.) Tj T* ET
Q
Q
 
endstream
endobj
71 0 obj
<< /Length 3907 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 729.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .461984 Tw (For more information on how Open vSwitch constructs megaflows, including about ways that it can make) Tj T* 0 Tw 1.36936 Tw (megaflow entries less specific than one would infer from the discussion here, please refer to the 2015) Tj T* 0 Tw (NSDI paper, "The Design and Implementation of Open vSwitch", which focuses on this algorithm.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 696.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Routing) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 666.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.01152 Tw (We've looked at how Faucet implements switching in OpenFlow, and how Open vSwitch implements) Tj T* 0 Tw (OpenFlow through its datapath architecture. Now let's start over, adding L3 routing into the picture.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 624.0236 cm
q
BT 1 0 0 1 0 26 Tm 1.29784 Tw 12 TL /F1 10 Tf 0 0 0 rg (It's remarkably easy to enable routing. We just change our ) Tj /F3 10 Tf 0 0 0 rg (vlans ) Tj /F1 10 Tf 0 0 0 rg (section in ) Tj /F3 10 Tf 0 0 0 rg (inst/faucet.yaml ) Tj /F1 10 Tf 0 0 0 rg (to) Tj T* 0 Tw 2.328221 Tw (specify a router IP address for each VLAN and define a router between them. The ) Tj /F3 10 Tf 0 0 0 rg (dps ) Tj /F1 10 Tf 0 0 0 rg (section is) Tj T* 0 Tw (unchanged:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 314.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 300 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 278 Tm /F3 10 Tf 12 TL (dps:) Tj T* (    switch-1:) Tj T* (        dp_id: 0x1) Tj T* (        timeout: 3600) Tj T* (        arp_neighbor_timeout: 3600) Tj T* (        interfaces:) Tj T* (            1:) Tj T* (                native_vlan: 100) Tj T* (            2:) Tj T* (                native_vlan: 100) Tj T* (            3:) Tj T* (                native_vlan: 100) Tj T* (            4:) Tj T* (                native_vlan: 200) Tj T* (            5:) Tj T* (                native_vlan: 200) Tj T* (vlans:) Tj T* (    100:) Tj T* (        faucet_vips: ["10.100.0.254/24"]) Tj T* (    200:) Tj T* (        faucet_vips: ["10.200.0.254/24"]) Tj T* (routers:) Tj T* (    router-1:) Tj T* (        vlans: [100, 200]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 294.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Then we restart Faucet:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 261.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ docker restart faucet) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 241.6236 cm
Q
q
1 0 0 1 62.69291 146.6236 cm
.960784 .960784 .862745 rg
n 0 95 469.8898 -95 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 69 Tm  T* ET
q
1 0 0 1 16 64 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F4 12.5 Tf 15 TL (Note) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .654985 Tw (One should be able to tell Faucet to re-read its configuration file without restarting it. I sometimes) Tj T* 0 Tw 1.05561 Tw (saw anomalous behavior when I did this, although I didn't characterize it well enough to make a) Tj T* 0 Tw (quality bug report. I found restarting the container to be reliable.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 95 m 469.8898 95 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 95 l S
n 469.8898 0 m 469.8898 95 l S
Q
Q
q
1 0 0 1 62.69291 140.6236 cm
Q
q
1 0 0 1 62.69291 110.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (OpenFlow Layer) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 92.62362 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Back in the OVS sandbox, let's see how the flow table has changed, with:) Tj T* ET
Q
Q
 
endstream
endobj
72 0 obj
<< /Length 5341 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 739.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ diff-flows flows1 br0) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 683.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .477209 Tw (First, table 3 has new flows to direct ARP packets to table 6 \(the virtual IP processing table\), presumably) Tj T* 0 Tw 2.203516 Tw (to handle ARP for the router IPs. New flows also send IP packets destined to a particular Ethernet) Tj T* 0 Tw .567045 Tw (address to table 4 \(the L3 forwarding table\); we can make the educated guess that the Ethernet address) Tj T* 0 Tw (is the one used by the Faucet router:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 614.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 510 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F3 10 Tf 12 TL (+table=3 priority=9131,arp,dl_vlan=100 actions=resubmit\(,6\)) Tj T* (+table=3 priority=9131,arp,dl_vlan=200 actions=resubmit\(,6\)) Tj T* (+table=3 priority=9099,ip,dl_vlan=100,dl_dst=0e:00:00:00:00:01 actions=resubmit\(,4\)) Tj T* (+table=3 priority=9099,ip,dl_vlan=200,dl_dst=0e:00:00:00:00:01 actions=resubmit\(,4\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 582.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .482488 Tw (The new flows in table 4 appear to be verifying that the packets are indeed addressed to a network or IP) Tj T* 0 Tw (address that Faucet knows how to route:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 489.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 486 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F3 10 Tf 12 TL (+table=4 priority=9131,ip,dl_vlan=100,nw_dst=10.100.0.254 actions=resubmit\(,6\)) Tj T* (+table=4 priority=9131,ip,dl_vlan=200,nw_dst=10.200.0.254 actions=resubmit\(,6\)) Tj T* (+table=4 priority=9123,ip,dl_vlan=200,nw_dst=10.100.0.0/24 actions=resubmit\(,6\)) Tj T* (+table=4 priority=9123,ip,dl_vlan=100,nw_dst=10.100.0.0/24 actions=resubmit\(,6\)) Tj T* (+table=4 priority=9123,ip,dl_vlan=200,nw_dst=10.200.0.0/24 actions=resubmit\(,6\)) Tj T* (+table=4 priority=9123,ip,dl_vlan=100,nw_dst=10.200.0.0/24 actions=resubmit\(,6\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 433.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.297882 Tw (Table 6 has a few different things going on. It sends ARP requests for the router IPs to the controller;) Tj T* 0 Tw 1.535318 Tw (presumably the controller will generate replies and send them back to the requester. It switches other) Tj T* 0 Tw .310651 Tw (ARP packets, either broadcasting them if they have a broadcast destination or attempting to unicast them) Tj T* 0 Tw (otherwise. It sends all other IP packets to the controller:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 340.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F3 10 Tf 12 TL (+table=6 priority=9133,arp,arp_tpa=10.100.0.254 actions=CONTROLLER:96) Tj T* (+table=6 priority=9133,arp,arp_tpa=10.200.0.254 actions=CONTROLLER:96) Tj T* (+table=6 priority=9132,arp,dl_dst=ff:ff:ff:ff:ff:ff actions=resubmit\(,8\)) Tj T* (+table=6 priority=9131,arp actions=resubmit\(,7\)) Tj T* (+table=6 priority=9131,ip actions=CONTROLLER:96) Tj T* (+table=6 priority=9131,icmp actions=CONTROLLER:96) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 320.2236 cm
Q
q
1 0 0 1 62.69291 189.2236 cm
.960784 .960784 .862745 rg
n 0 131 469.8898 -131 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 105 Tm  T* ET
q
1 0 0 1 16 100 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F4 12.5 Tf 15 TL (Note) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
BT 1 0 0 1 0 62 Tm .393516 Tw 12 TL /F1 10 Tf 0 0 0 rg (There's one oddity here in that ICMP packets can match either the ) Tj /F3 10 Tf 0 0 0 rg (ip ) Tj /F1 10 Tf 0 0 0 rg (or ) Tj /F3 10 Tf 0 0 0 rg (icmp ) Tj /F1 10 Tf 0 0 0 rg (entry, which both) Tj T* 0 Tw 2.004983 Tw (have priority 9131. OpenFlow says, "If there are multiple matching flow entries with the same) Tj T* 0 Tw 1.74784 Tw (highest priority, the selected flow entry is explicitly undefined." In this case, it probably doesn't) Tj T* 0 Tw .028221 Tw (matter, since both flows have the same actions, but if Faucet wants to keep track of ICMP statistics) Tj T* 0 Tw 1.061751 Tw (separately from other IP packets, then it should install the ) Tj /F3 10 Tf 0 0 0 rg (ip ) Tj /F1 10 Tf 0 0 0 rg (flow with a lower priority than the) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (icmp ) Tj /F1 10 Tf 0 0 0 rg (flow.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 131 m 469.8898 131 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 131 l S
n 469.8898 0 m 469.8898 131 l S
Q
Q
q
1 0 0 1 62.69291 183.2236 cm
Q
q
1 0 0 1 62.69291 153.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .232488 Tw (Performance is clearly going to be poor if every packet that needs to be routed has to go to the controller,) Tj T* 0 Tw (but it's unlikely that's the full story. In the next section, we'll take a closer look.) Tj T* ET
Q
Q
 
endstream
endobj
73 0 obj
<< /Length 8161 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 747.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Tracing) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 693.0236 cm
q
BT 1 0 0 1 0 38 Tm 1.904692 Tw 12 TL /F1 10 Tf 0 0 0 rg (As in our switching example, we can play some "what-if?" games to figure out how this works. Let's) Tj T* 0 Tw .826488 Tw (suppose that a machine with IP 10.100.0.1, on port ) Tj /F3 10 Tf 0 0 0 rg (p1) Tj /F1 10 Tf 0 0 0 rg (, wants to send a IP packet to a machine with IP) Tj T* 0 Tw .58186 Tw (10.200.0.1 on port ) Tj /F3 10 Tf 0 0 0 rg (p4) Tj /F1 10 Tf 0 0 0 rg (. Assuming that these hosts have not been in communication recently, the steps to) Tj T* 0 Tw (accomplish this are normally the following:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 687.0236 cm
Q
q
1 0 0 1 62.69291 687.0236 cm
Q
q
1 0 0 1 62.69291 675.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Host 10.100.0.1 sends an ARP request to router 10.100.0.254.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 669.0236 cm
Q
q
1 0 0 1 62.69291 657.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The router sends an ARP reply to the host.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 651.0236 cm
Q
q
1 0 0 1 62.69291 639.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Host 10.100.0.1 sends an IP packet to 10.200.0.1, via the router's Ethernet address.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 633.0236 cm
Q
q
1 0 0 1 62.69291 621.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The router broadcasts an ARP request to ) Tj /F3 10 Tf 0 0 0 rg (p4 ) Tj /F1 10 Tf 0 0 0 rg (and ) Tj /F3 10 Tf 0 0 0 rg (p5) Tj /F1 10 Tf 0 0 0 rg (, the ports that carry the 10.200.0.) Tj (<) Tj (x) Tj (> network.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 615.0236 cm
Q
q
1 0 0 1 62.69291 603.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Host 10.200.0.1 sends an ARP reply to the router.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 597.0236 cm
Q
q
1 0 0 1 62.69291 573.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .147318 Tw (Either the router sends the IP packet \(which it buffered\) to 10.200.0.1, or eventually 10.100.0.1 times) Tj T* 0 Tw (out and resends it.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 573.0236 cm
Q
q
1 0 0 1 62.69291 555.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Let's use ) Tj /F3 10 Tf 0 0 0 rg (ofproto/trace ) Tj /F1 10 Tf 0 0 0 rg (to see whether Faucet and OVS follow this procedure.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 537.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Before we start, save a new snapshot of the flow tables for later comparison:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 503.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ save-flows br0 ) Tj (>) Tj ( flows2) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 476.8236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F4 12.5 Tf 0 0 0 rg (Step 1: Host ARP for Router) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 446.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .294651 Tw (Let's simulate the ARP from 10.100.0.1 to its gateway router 10.100.0.254. This requires more detail than) Tj T* 0 Tw (any of the packets we've simulated previously:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 413.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 1308 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ ovs-appctl ofproto/trace br0 in_port=p1,dl_src=00:01:02:03:04:05,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x806,arp_spa=10.100.0.1,arp_tpa=10.100.0.254,arp_sha=00:01:02:03:04:05,arp_tha=ff:ff:ff:ff:ff:ff,arp_op=1 -generate) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 381.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.308876 Tw (The important part of the output is where it shows that the packet was recognized as an ARP request) Tj T* 0 Tw (destined to the router gateway and therefore sent to the controller:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 336.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL (6. arp,arp_tpa=10.100.0.254, priority 9133, cookie 0x5adc15c0) Tj T* (   CONTROLLER:96) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 304.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.294983 Tw (The Faucet log shows that Faucet learned the host's MAC address, its MAC-to-IP mapping, and) Tj T* 0 Tw (responded to the ARP request:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 247.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 852 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL (Oct 15 19:01:16 faucet.valve INFO     DPID 1 \(0x1\) Adding new route 10.100.0.1/32 via 10.100.0.1 \(00:01:02:03:04:05\) on VLAN 100) Tj T* (Oct 15 19:01:16 faucet.valve INFO     DPID 1 \(0x1\) Responded to ARP request for 10.100.0.254 from 10.100.0.1 \(00:01:02:03:04:05\) on VLAN 100) Tj T* (Oct 15 19:01:16 faucet.valve INFO     DPID 1 \(0x1\) learned 00:01:02:03:04:05 on Port 1 on VLAN 100 \(1 hosts total\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 227.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We can also look at the changes to the flow tables:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 146.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 1110 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ diff-flows flows2 br0) Tj T* (+table=3 priority=9098,in_port=1,dl_vlan=100,dl_src=00:01:02:03:04:05 hard_timeout=3600 actions=goto_table:7) Tj T* (+table=4 priority=9131,ip,dl_vlan=100,nw_dst=10.100.0.1 actions=set_field:4196-) Tj (>) Tj (vlan_vid,set_field:0e:00:00:00:00:01-) Tj (>) Tj (eth_src,set_field:00:01:02:03:04:05-) Tj (>) Tj (eth_dst,dec_ttl,goto_table:7) Tj T* (+table=4 priority=9131,ip,dl_vlan=200,nw_dst=10.100.0.1 actions=set_field:4196-) Tj (>) Tj (vlan_vid,set_field:0e:00:00:00:00:01-) Tj (>) Tj (eth_src,set_field:00:01:02:03:04:05-) Tj (>) Tj (eth_dst,dec_ttl,goto_table:7) Tj T* (+table=7 priority=9099,dl_vlan=100,dl_dst=00:01:02:03:04:05 idle_timeout=3600 actions=pop_vlan,output:1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 78.02362 cm
q
BT 1 0 0 1 0 50 Tm .328084 Tw 12 TL /F1 10 Tf 0 0 0 rg (The new flows include one in table 3 and one in table 7 for the learned MAC, which have the same forms) Tj T* 0 Tw 1.026457 Tw (we saw before. The new flows in table 4 are different. They matches packets directed to 10.100.0.1 \(in) Tj T* 0 Tw 1.532651 Tw (two VLANs\) and forward them to the host by updating the Ethernet source and destination addresses) Tj T* 0 Tw 1.347318 Tw (appropriately, decrementing the TTL, and skipping ahead to unicast output in table 7. This means that) Tj T* 0 Tw (packets sent ) Tj /F2 10 Tf (to ) Tj /F1 10 Tf (10.100.0.1 should now get to their destination.) Tj T* ET
Q
Q
 
endstream
endobj
74 0 obj
<< /Length 5092 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 750.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F4 12.5 Tf 0 0 0 rg (Step 2: Router Sends ARP Reply) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 708.0236 cm
q
BT 1 0 0 1 0 26 Tm .954985 Tw 12 TL /F3 10 Tf 0 0 0 rg (inst/faucet.log ) Tj /F1 10 Tf 0 0 0 rg (said that the router sent an ARP reply. How can we see it? Simulated packets just) Tj T* 0 Tw .947356 Tw (get dropped by default. One way is to configure the dummy ports to write the packets they receive to a) Tj T* 0 Tw (file. Let's try that. First configure the port:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 674.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ ovs-vsctl set interface p1 options:pcap=p1.pcap) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 654.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Then re-run the "trace" command:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 621.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 1308 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ ovs-appctl ofproto/trace br0 in_port=p1,dl_src=00:01:02:03:04:05,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x806,arp_spa=10.100.0.1,arp_tpa=10.100.0.254,arp_sha=00:01:02:03:04:05,arp_tha=ff:ff:ff:ff:ff:ff,arp_op=1 -generate) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 601.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (And dump the reply packet:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 544.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 1314 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ /usr/sbin/tcpdump -evvvr sandbox/p1.pcap) Tj T* (reading from file sandbox/x.pcap, link-type EN10MB \(Ethernet\)) Tj T* (15:34:14.172222 0e:00:00:00:00:01 \(oui Unknown\) ) Tj (>) Tj ( 00:01:02:03:04:05 \(oui Unknown\), ethertype ARP \(0x0806\), length 60: Ethernet \(len 6\), IPv4 \(len 4\), Reply 10.100.0.254 is-at 0e:00:00:00:00:01 \(oui Unknown\), length 46) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 512.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 5.373318 Tw (We clearly see the ARP reply, which tells us that the Faucet router's Ethernet address is) Tj T* 0 Tw (0e:00:00:00:00:01 \(as we guessed before from the flow table.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 494.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Let's configure the rest of our ports to log their packets, too:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 461.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ for i in 2 3 4 5; do ovs-vsctl set interface p$i options:pcap=p$i.pcap; done) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 434.2236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F4 12.5 Tf 0 0 0 rg (Step 3: Host Sends IP Packet) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 404.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .770514 Tw (Now that host 10.100.0.1 has the MAC address for its router, it can send an IP packet to 10.200.0.1 via) Tj T* 0 Tw (the router's MAC address, like this:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 107.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 1170 288 re B*
Q
q
BT 1 0 0 1 0 266 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ ovs-appctl ofproto/trace br0 in_port=p1,dl_src=00:01:02:03:04:05,dl_dst=0e:00:00:00:00:01,udp,nw_src=10.100.0.1,nw_dst=10.200.0.1,nw_ttl=64 -generate) Tj T* (Flow: ip,in_port=1,vlan_tci=0x0000,dl_src=00:01:02:03:04:05,dl_dst=0e:00:00:00:00:01,nw_src=10.100.0.1,nw_dst=10.200.0.1,nw_proto=17,nw_tos=0,nw_ecn=0,nw_ttl=64) Tj T*  T* (bridge\("br0"\)) Tj T* (-------------) Tj T* ( 0. in_port=1, priority 9099, cookie 0x5adc15c0) Tj T* (    goto_table:1) Tj T* ( 1. in_port=1,vlan_tci=0x0000/0x1fff, priority 9000, cookie 0x5adc15c0) Tj T* (    push_vlan:0x8100) Tj T* (    set_field:4196-) Tj (>) Tj (vlan_vid) Tj T* (    goto_table:3) Tj T* ( 3. ip,dl_vlan=100,dl_dst=0e:00:00:00:00:01, priority 9099, cookie 0x5adc15c0) Tj T* (    goto_table:4) Tj T* ( 4. ip,dl_vlan=100,nw_dst=10.200.0.0/24, priority 9123, cookie 0x5adc15c0) Tj T* (    goto_table:6) Tj T* ( 6. ip, priority 9131, cookie 0x5adc15c0) Tj T* (    CONTROLLER:96) Tj T*  T* (Final flow: ip,in_port=1,dl_vlan=100,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=00:01:02:03:04:05,dl_dst=0e:00:00:00:00:01,nw_src=10.100.0.1,nw_dst=10.200.0.1,nw_proto=17,nw_tos=0,nw_ecn=0,nw_ttl=64) Tj T* (Megaflow: recirc_id=0,eth,ip,in_port=1,vlan_tci=0x0000/0x1fff,dl_src=00:01:02:03:04:05,dl_dst=0e:00:00:00:00:01,nw_dst=10.200.0.1,nw_frag=no) Tj T* (Datapath actions: push_vlan\(vid=100,pcp=0\)) Tj T* (This flow is handled by the userspace slow path because it:) Tj T* (        - Sends "packet-in" messages to the OpenFlow controller.) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
75 0 obj
<< /Length 5271 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 717.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 2.16881 Tw (Observe that the packet gets recognized as destined to the router, in table 3, and then as properly) Tj T* 0 Tw 2.233516 Tw (destined to the 10.200.0.0/24 network, in table 4. In table 6, however, it gets sent to the controller.) Tj T* 0 Tw 1.533318 Tw (Presumably, this is because Faucet has not yet resolved an Ethernet address for the destination host) Tj T* 0 Tw (10.200.0.1. It probably sent out an ARP request. Let's take a look in the next step.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 690.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F4 12.5 Tf 0 0 0 rg (Step 4: Router Broadcasts ARP Request) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 660.0236 cm
q
BT 1 0 0 1 0 14 Tm .491654 Tw 12 TL /F1 10 Tf 0 0 0 rg (The router needs to know the Ethernet address of 10.200.0.1. It knows that, if this machine exists, it's on) Tj T* 0 Tw (port ) Tj /F3 10 Tf 0 0 0 rg (p4 ) Tj /F1 10 Tf 0 0 0 rg (or ) Tj /F3 10 Tf 0 0 0 rg (p5) Tj /F1 10 Tf 0 0 0 rg (, since we configured those ports as VLAN 200.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 642.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Let's make sure:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 584.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 1110 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ /usr/sbin/tcpdump -evvvr sandbox/p4.pcap) Tj T* (reading from file sandbox/p4.pcap, link-type EN10MB \(Ethernet\)) Tj T* (15:55:42.977504 0e:00:00:00:00:01 \(oui Unknown\) ) Tj (>) Tj ( Broadcast, ethertype ARP \(0x0806\), length 60: Ethernet \(len 6\), IPv4 \(len 4\), Request who-has 10.200.0.1 tell 10.200.0.254, length 46) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 564.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (and:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 507.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 1110 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ /usr/sbin/tcpdump -evvvr sandbox/p5.pcap) Tj T* (reading from file sandbox/p5.pcap, link-type EN10MB \(Ethernet\)) Tj T* (15:55:42.977568 0e:00:00:00:00:01 \(oui Unknown\) ) Tj (>) Tj ( Broadcast, ethertype ARP \(0x0806\), length 60: Ethernet \(len 6\), IPv4 \(len 4\), Request who-has 10.200.0.1 tell 10.200.0.254, length 46) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 487.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (For good measure, let's make sure that it wasn't sent to ) Tj /F3 10 Tf 0 0 0 rg (p3) Tj /F1 10 Tf 0 0 0 rg (:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 442.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL ($ /usr/sbin/tcpdump -evvvr sandbox/p3.pcap) Tj T* (reading from file sandbox/p3.pcap, link-type EN10MB \(Ethernet\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 415.4236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F4 12.5 Tf 0 0 0 rg (Step 5: Host 2 Sends ARP Reply) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 397.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Faucet controller sent an ARP request, so we can send an ARP reply:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 124.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 1326 264 re B*
Q
q
BT 1 0 0 1 0 242 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ ovs-appctl ofproto/trace br0 in_port=p4,dl_src=00:10:20:30:40:50,dl_dst=0e:00:00:00:00:01,dl_type=0x806,arp_spa=10.200.0.1,arp_tpa=10.200.0.254,arp_sha=00:10:20:30:40:50,arp_tha=0e:00:00:00:00:01,arp_op=2 -generate) Tj T* (Flow: arp,in_port=4,vlan_tci=0x0000,dl_src=00:10:20:30:40:50,dl_dst=0e:00:00:00:00:01,arp_spa=10.200.0.1,arp_tpa=10.200.0.254,arp_op=2,arp_sha=00:10:20:30:40:50,arp_tha=0e:00:00:00:00:01) Tj T*  T* (bridge\("br0"\)) Tj T* (-------------) Tj T* ( 0. in_port=4, priority 9099, cookie 0x5adc15c0) Tj T* (    goto_table:1) Tj T* ( 1. in_port=4,vlan_tci=0x0000/0x1fff, priority 9000, cookie 0x5adc15c0) Tj T* (    push_vlan:0x8100) Tj T* (    set_field:4296-) Tj (>) Tj (vlan_vid) Tj T* (    goto_table:3) Tj T* ( 3. arp,dl_vlan=200, priority 9131, cookie 0x5adc15c0) Tj T* (    goto_table:6) Tj T* ( 6. arp,arp_tpa=10.200.0.254, priority 9133, cookie 0x5adc15c0) Tj T* (    CONTROLLER:96) Tj T*  T* (Final flow: arp,in_port=4,dl_vlan=200,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=00:10:20:30:40:50,dl_dst=0e:00:00:00:00:01,arp_spa=10.200.0.1,arp_tpa=10.200.0.254,arp_op=2,arp_sha=00:10:20:30:40:50,arp_tha=0e:00:00:00:00:01) Tj T* (Megaflow: recirc_id=0,eth,arp,in_port=4,vlan_tci=0x0000/0x1fff,dl_src=00:10:20:30:40:50,dl_dst=0e:00:00:00:00:01,arp_tpa=10.200.0.254) Tj T* (Datapath actions: push_vlan\(vid=200,pcp=0\)) Tj T* (This flow is handled by the userspace slow path because it:) Tj T* (        - Sends "packet-in" messages to the OpenFlow controller.) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 104.2236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (It shows up in ) Tj /F3 10 Tf 0 0 0 rg (inst/faucet.log) Tj /F1 10 Tf 0 0 0 rg (:) Tj T* ET
Q
Q
 
endstream
endobj
76 0 obj
<< /Length 5022 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 727.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 696 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL (Oct 16 23:02:22 faucet.valve INFO     DPID 1 \(0x1\) ARP response 10.200.0.1 \(00:10:20:30:40:50\) on VLAN 200) Tj T* (Oct 16 23:02:22 faucet.valve INFO     DPID 1 \(0x1\) learned 00:10:20:30:40:50 on Port 4 on VLAN 200 \(1 hosts total\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 707.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (and in the OVS flow tables:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 590.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 1110 108 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ diff-flows flows2 br0) Tj T* (+table=3 priority=9098,in_port=4,dl_vlan=200,dl_src=00:10:20:30:40:50 hard_timeout=295 actions=goto_table:7) Tj T* (...) Tj T* (+table=4 priority=9131,ip,dl_vlan=200,nw_dst=10.200.0.1 actions=set_field:4296-) Tj (>) Tj (vlan_vid,set_field:0e:00:00:00:00:01-) Tj (>) Tj (eth_src,set_field:00:10:20:30:40:50-) Tj (>) Tj (eth_dst,dec_ttl,goto_table:7) Tj T* (+table=4 priority=9131,ip,dl_vlan=100,nw_dst=10.200.0.1 actions=set_field:4296-) Tj (>) Tj (vlan_vid,set_field:0e:00:00:00:00:01-) Tj (>) Tj (eth_src,set_field:00:10:20:30:40:50-) Tj (>) Tj (eth_dst,dec_ttl,goto_table:7) Tj T* (...) Tj T* (+table=4 priority=9123,ip,dl_vlan=100,nw_dst=10.200.0.0/24 actions=goto_table:6) Tj T* (+table=7 priority=9099,dl_vlan=200,dl_dst=00:10:20:30:40:50 idle_timeout=295 actions=pop_vlan,output:4) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 563.6236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F4 12.5 Tf 0 0 0 rg (Step 6: IP Packet Delivery) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 521.6236 cm
q
BT 1 0 0 1 0 26 Tm .595777 Tw 12 TL /F1 10 Tf 0 0 0 rg (Now both the host and the router have everything they need to deliver the packet. There are two ways it) Tj T* 0 Tw .81528 Tw (might happen. If Faucet's router is smart enough to buffer the packet that trigger ARP resolution, then it) Tj T* 0 Tw (might have delivered it already. If so, then it should show up in ) Tj /F3 10 Tf 0 0 0 rg (p4.pcap) Tj /F1 10 Tf 0 0 0 rg (. Let's take a look:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 476.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL ($ /usr/sbin/tcpdump -evvvr sandbox/p4.pcap ip) Tj T* (reading from file sandbox/p4.pcap, link-type EN10MB \(Ethernet\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 444.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .43881 Tw (Nope. That leaves the other possibility, which is that Faucet waits for the original sending host to re-send) Tj T* 0 Tw (the packet. We can do that by re-running the trace:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 111.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 1050 324 re B*
Q
q
BT 1 0 0 1 0 302 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ ovs-appctl ofproto/trace br0 in_port=p1,dl_src=00:01:02:03:04:05,dl_dst=0e:00:00:00:00:01,udp,nw_src=10.100.0.1,nw_dst=10.200.0.1,nw_ttl=64 -generate) Tj T* (Flow: udp,in_port=1,vlan_tci=0x0000,dl_src=00:01:02:03:04:05,dl_dst=0e:00:00:00:00:01,nw_src=10.100.0.1,nw_dst=10.200.0.1,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=0) Tj T*  T* (bridge\("br0"\)) Tj T* (-------------) Tj T* ( 0. in_port=1, priority 9099, cookie 0x5adc15c0) Tj T* (    goto_table:1) Tj T* ( 1. in_port=1,vlan_tci=0x0000/0x1fff, priority 9000, cookie 0x5adc15c0) Tj T* (    push_vlan:0x8100) Tj T* (    set_field:4196-) Tj (>) Tj (vlan_vid) Tj T* (    goto_table:3) Tj T* ( 3. ip,dl_vlan=100,dl_dst=0e:00:00:00:00:01, priority 9099, cookie 0x5adc15c0) Tj T* (    goto_table:4) Tj T* ( 4. ip,dl_vlan=100,nw_dst=10.200.0.1, priority 9131, cookie 0x5adc15c0) Tj T* (    set_field:4296-) Tj (>) Tj (vlan_vid) Tj T* (    set_field:0e:00:00:00:00:01-) Tj (>) Tj (eth_src) Tj T* (    set_field:00:10:20:30:40:50-) Tj (>) Tj (eth_dst) Tj T* (    dec_ttl) Tj T* (    goto_table:7) Tj T* ( 7. dl_vlan=200,dl_dst=00:10:20:30:40:50, priority 9099, cookie 0x5adc15c0) Tj T* (    pop_vlan) Tj T* (    output:4) Tj T*  T* (Final flow: udp,in_port=1,vlan_tci=0x0000,dl_src=0e:00:00:00:00:01,dl_dst=00:10:20:30:40:50,nw_src=10.100.0.1,nw_dst=10.200.0.1,nw_tos=0,nw_ecn=0,nw_ttl=63,tp_src=0,tp_dst=0) Tj T* (Megaflow: recirc_id=0,eth,ip,in_port=1,vlan_tci=0x0000/0x1fff,dl_src=00:01:02:03:04:05,dl_dst=0e:00:00:00:00:01,nw_dst=10.200.0.1,nw_ttl=64,nw_frag=no) Tj T* (Datapath actions: set\(eth\(src=0e:00:00:00:00:01,dst=00:10:20:30:40:50\)\),set\(ipv4\(dst=10.200.0.1,ttl=63\)\),4) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 91.22362 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Finally, we have working IP packet forwarding!) Tj T* ET
Q
Q
 
endstream
endobj
77 0 obj
<< /Length 5066 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 747.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Performance) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 729.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Take another look at the megaflow line above:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 695.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 912 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (Megaflow: recirc_id=0,eth,ip,in_port=1,vlan_tci=0x0000/0x1fff,dl_src=00:01:02:03:04:05,dl_dst=0e:00:00:00:00:01,nw_dst=10.200.0.1,nw_ttl=64,nw_frag=no) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 639.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.126412 Tw (This means that \(almost\) any packet between these Ethernet source and destination hosts, destined to) Tj T* 0 Tw 1.123876 Tw (the given IP host, will be handled by this single megaflow cache entry. So regardless of the number of) Tj T* 0 Tw 1.923059 Tw (UDP packets or TCP connections that these hosts exchange, Open vSwitch packet processing won't) Tj T* 0 Tw (need to fall back to the slow path. It is quite efficient.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 627.8236 cm
Q
q
1 0 0 1 62.69291 532.8236 cm
.960784 .960784 .862745 rg
n 0 95 469.8898 -95 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 69 Tm  T* ET
q
1 0 0 1 16 64 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F4 12.5 Tf 15 TL (Note) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .65311 Tw (The exceptions are packets with a TTL other than 64, and fragmented packets. Most hosts use a) Tj T* 0 Tw .373735 Tw (constant TTL for outgoing packets, and fragments are rare. If either of those did change, then that) Tj T* 0 Tw (would simply result in a new megaflow cache entry.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 95 m 469.8898 95 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 95 l S
n 469.8898 0 m 469.8898 95 l S
Q
Q
q
1 0 0 1 62.69291 526.8236 cm
Q
q
1 0 0 1 62.69291 508.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The datapath actions might also be worth a look:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 475.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 648 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (Datapath actions: set\(eth\(src=0e:00:00:00:00:01,dst=00:10:20:30:40:50\)\),set\(ipv4\(dst=10.200.0.1,ttl=63\)\),4) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 407.6236 cm
q
BT 1 0 0 1 0 50 Tm .123318 Tw 12 TL /F1 10 Tf 0 0 0 rg (This just means that, to process these packets, the datapath changes the Ethernet source and destination) Tj T* 0 Tw 2.387045 Tw (addresses and the IP TTL, and then transmits the packet to port ) Tj /F3 10 Tf 0 0 0 rg (p4 ) Tj /F1 10 Tf 0 0 0 rg (\(also numbered 4\). Notice in) Tj T* 0 Tw .116235 Tw (particular that, despite the OpenFlow actions that pushed, modified, and popped back off a VLAN, there is) Tj T* 0 Tw .925984 Tw (nothing in the datapath actions about VLANs. This is because the OVS flow translation code "optimizes) Tj T* 0 Tw (out" redundant or unneeded actions, which saves time when the cache entry is executed later.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 395.6236 cm
Q
q
1 0 0 1 62.69291 312.6236 cm
.960784 .960784 .862745 rg
n 0 83 469.8898 -83 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 57 Tm  T* ET
q
1 0 0 1 16 52 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F4 12.5 Tf 15 TL (Note) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.021235 Tw (It's not clear why the actions also re-set the IP destination address to its original value. Perhaps) Tj T* 0 Tw (this is a minor performance bug.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 83 m 469.8898 83 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 83 l S
n 469.8898 0 m 469.8898 83 l S
Q
Q
q
1 0 0 1 62.69291 306.6236 cm
Q
q
1 0 0 1 62.69291 273.6236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (ACLs) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 243.6236 cm
q
BT 1 0 0 1 0 14 Tm .277488 Tw 12 TL /F1 10 Tf 0 0 0 rg (Let's try out some ACLs, since they do a good job illustrating some of the ways that OVS tries to optimize) Tj T* 0 Tw (megaflows. Update ) Tj /F3 10 Tf 0 0 0 rg (inst/faucet.yaml ) Tj /F1 10 Tf 0 0 0 rg (to the following:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 78.42362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 156 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 134 Tm /F3 10 Tf 12 TL (dps:) Tj T* (    switch-1:) Tj T* (        dp_id: 0x1) Tj T* (        timeout: 3600) Tj T* (        arp_neighbor_timeout: 3600) Tj T* (        interfaces:) Tj T* (            1:) Tj T* (                native_vlan: 100) Tj T* (                acl_in: 1) Tj T* (            2:) Tj T* (                native_vlan: 100) Tj T* (            3:) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
78 0 obj
<< /Length 3978 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 463.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 300 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 278 Tm /F3 10 Tf 12 TL (                native_vlan: 100) Tj T* (            4:) Tj T* (                native_vlan: 200) Tj T* (            5:) Tj T* (                native_vlan: 200) Tj T* (vlans:) Tj T* (    100:) Tj T* (        faucet_vips: ["10.100.0.254/24"]) Tj T* (    200:) Tj T* (        faucet_vips: ["10.200.0.254/24"]) Tj T* (routers:) Tj T* (    router-1:) Tj T* (        vlans: [100, 200]) Tj T* (acls:) Tj T* (    1:) Tj T* (        - rule:) Tj T* (            dl_type: 0x800) Tj T* (            nw_proto: 6) Tj T* (            tp_dst: 8080) Tj T* (            actions:) Tj T* (                allow: 0) Tj T* (        - rule:) Tj T* (            actions:) Tj T* (                allow: 1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 443.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Then restart Faucet:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 410.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ docker restart faucet) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 378.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.082209 Tw (On port 1, this new configuration blocks all traffic to TCP port 8080 and allows all other traffic. The) Tj T* 0 Tw (resulting change in the flow table shows this clearly too:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 309.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F3 10 Tf 12 TL ($ diff-flows flows2 br0) Tj T* (-priority=9099,in_port=1 actions=goto_table:1) Tj T* (+priority=9098,in_port=1 actions=goto_table:1) Tj T* (+priority=9099,tcp,in_port=1,tp_dst=8080 actions=drop) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 265.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.572651 Tw (The most interesting question here is performance. If you recall the earlier discussion, when a packet) Tj T* 0 Tw .813876 Tw (through the flow table encounters a match on a given field, the resulting megaflow has to match on that) Tj T* 0 Tw (field, even if the flow didn't actually match. This is expensive.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 187.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL 1.705988 Tw (In particular, here you can see that any TCP packet is going to encounter the ACL flow, even if it is) Tj T* 0 Tw .220941 Tw (directed to a port other than 8080. If that means that every megaflow for a TCP packet is going to have to) Tj T* 0 Tw 1.272927 Tw (match on the TCP destination, that's going to be bad for caching performance because there will be a) Tj T* 0 Tw .327485 Tw (need for a separate megaflow for every TCP destination port that actually appears in traffic, which means) Tj T* 0 Tw 1.476235 Tw (a lot more megaflows than otherwise. \(Really, in practice, if such a simple ACL blew up performance,) Tj T* 0 Tw (OVS wouldn't be a very good switch!\)) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 169.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Let's see what happens, by sending a packet to port 80 \(instead of 8080\):) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 88.22362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 978 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ ovs-appctl ofproto/trace br0 in_port=p1,dl_src=00:01:02:03:04:05,dl_dst=0e:00:00:00:00:01,tcp,nw_src=10.100.0.1,nw_dst=10.200.0.1,nw_ttl=64,tp_dst=80 -generate) Tj T*  T* (bridge\("br0"\)) Tj T* (-------------) Tj T* ( 0. in_port=1, priority 9098, cookie 0x5adc15c0) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
79 0 obj
<< /Length 5817 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 571.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 1290 192 re B*
Q
q
BT 1 0 0 1 0 170 Tm 12 TL /F3 10 Tf 0 0 0 rg (    goto_table:1) Tj T* ( 1. in_port=1,vlan_tci=0x0000/0x1fff, priority 9000, cookie 0x5adc15c0) Tj T* (    push_vlan:0x8100) Tj T* (    set_field:4196-) Tj (>) Tj (vlan_vid) Tj T* (    goto_table:3) Tj T* ( 3. ip,dl_vlan=100,dl_dst=0e:00:00:00:00:01, priority 9099, cookie 0x5adc15c0) Tj T* (    goto_table:4) Tj T* ( 4. ip,dl_vlan=100,nw_dst=10.200.0.0/24, priority 9123, cookie 0x5adc15c0) Tj T* (    goto_table:6) Tj T* ( 6. ip, priority 9131, cookie 0x5adc15c0) Tj T* (    CONTROLLER:96) Tj T*  T* (Final flow: tcp,in_port=1,dl_vlan=100,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=00:01:02:03:04:05,dl_dst=0e:00:00:00:00:01,nw_src=10.100.0.1,nw_dst=10.200.0.1,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80,tcp_flags=0) Tj T* (Megaflow: recirc_id=0,eth,tcp,in_port=1,vlan_tci=0x0000/0x1fff,dl_src=00:01:02:03:04:05,dl_dst=0e:00:00:00:00:01,nw_dst=10.200.0.1,nw_frag=no,tp_dst=0x0/0xf000) Tj T* (Datapath actions: push_vlan\(vid=100,pcp=0\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 527.8236 cm
q
BT 1 0 0 1 0 26 Tm 6.582651 Tw 12 TL /F1 10 Tf 0 0 0 rg (Take a look at the Megaflow line and in particular the match on ) Tj /F3 10 Tf 0 0 0 rg (tp_dst) Tj /F1 10 Tf 0 0 0 rg (, which says) Tj T* 0 Tw .584692 Tw /F3 10 Tf 0 0 0 rg (tp_dst=0x0/0xf000) Tj /F1 10 Tf 0 0 0 rg (. What this means is that the megaflow matches on only the top 4 bits of the TCP) Tj T* 0 Tw (destination port. That works because:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 482.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL (  80 \(base 10\) == 0001,1111,1001,0000 \(base 2\)) Tj T* (8080 \(base 10\) == 0000,0000,0101,0000 \(base 2\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 438.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .961417 Tw (and so by matching on only the top 4 bits, rather than all 16, the OVS fast path can distinguish port 80) Tj T* 0 Tw 1.461318 Tw (from port 8080. This allows this megaflow to match one-sixteenth of the TCP destination port address) Tj T* 0 Tw (space, rather than just 1/65536th of it.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 426.6236 cm
Q
q
1 0 0 1 62.69291 331.6236 cm
.960784 .960784 .862745 rg
n 0 95 469.8898 -95 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 69 Tm  T* ET
q
1 0 0 1 16 64 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F4 12.5 Tf 15 TL (Note) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .67561 Tw (The algorithm OVS uses for this purpose isn't perfect. In this case, a single-bit match would work) Tj T* 0 Tw 1.084269 Tw (\(e.g. tp_dst=0x0/0x1000\), and would be superior since it would only match half the port address) Tj T* 0 Tw (space instead of one-sixteenth.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 95 m 469.8898 95 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 95 l S
n 469.8898 0 m 469.8898 95 l S
Q
Q
q
1 0 0 1 62.69291 325.6236 cm
Q
q
1 0 0 1 62.69291 295.6236 cm
q
BT 1 0 0 1 0 14 Tm .136235 Tw 12 TL /F1 10 Tf 0 0 0 rg (For details of this algorithm, please refer to ) Tj /F3 10 Tf 0 0 0 rg (lib/classifier.c ) Tj /F1 10 Tf 0 0 0 rg (in the Open vSwitch source tree, or our) Tj T* 0 Tw (2015 NSDI paper "The Design and Implementation of Open vSwitch".) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 262.6236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Finishing Up) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 232.6236 cm
q
BT 1 0 0 1 0 14 Tm .49881 Tw 12 TL /F1 10 Tf 0 0 0 rg (When you're done, you probably want to exit the sandbox session, with Control+D or ) Tj /F3 10 Tf 0 0 0 rg (exit) Tj /F1 10 Tf 0 0 0 rg (, and stop the) Tj T* 0 Tw (Faucet controller with ) Tj /F3 10 Tf 0 0 0 rg (docker stop) Tj ( ) Tj (faucet;) Tj ( ) Tj (docker) Tj ( ) Tj (rm) Tj ( ) Tj (faucet) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 199.6236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Further Directions) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 169.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.358876 Tw (We've looked a fair bit at how Faucet interacts with Open vSwitch. If you still have some interest, you) Tj T* 0 Tw (might want to explore some of these directions:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 163.6236 cm
Q
q
1 0 0 1 62.69291 163.6236 cm
Q
q
1 0 0 1 62.69291 127.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm .93784 Tw 12 TL /F1 10 Tf 0 0 0 rg (Adding more than one switch. Faucet can control multiple switches but we've only been simulating) Tj T* 0 Tw 2.938735 Tw (one of them. It's easy enough to make a single OVS instance act as multiple switches \(just) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (ovs-vsctl) Tj ( ) Tj (add-br ) Tj /F1 10 Tf 0 0 0 rg (another bridge\), or you could use genuinely separate OVS instances.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 121.6236 cm
Q
q
1 0 0 1 62.69291 97.62362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.135366 Tw (Additional features. Faucet has more features than we've demonstrated, such as IPv6 routing and) Tj T* 0 Tw (port mirroring. These should also interact gracefully with Open vSwitch.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 91.62362 cm
Q
 
endstream
endobj
80 0 obj
<< /Length 948 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 705.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 50 Tm 3.641647 Tw 12 TL /F1 10 Tf 0 0 0 rg (Real performance testing. We've looked at how flows and traces ) Tj /F2 10 Tf (should ) Tj /F1 10 Tf (demonstrate good) Tj T* 0 Tw .45811 Tw (performance, but of course there's no proof until it actually works in practice. We've also only tested) Tj T* 0 Tw .855984 Tw (with trivial configurations. Open vSwitch can scale to millions of OpenFlow flows, but the scaling in) Tj T* 0 Tw .888735 Tw (practice depends on the particular flow tables and traffic patterns, so it's valuable to test with large) Tj T* 0 Tw (configurations, either in the way we've done it or with real traffic.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 705.0236 cm
Q
 
endstream
endobj
81 0 obj
<< /Nums [ 0 82 0 R 1 83 0 R 2 84 0 R 3 85 0 R 4 86 0 R 
  5 87 0 R 6 88 0 R 7 89 0 R 8 90 0 R 9 91 0 R 
  10 92 0 R 11 93 0 R 12 94 0 R 13 95 0 R 14 96 0 R 
  15 97 0 R 16 98 0 R 17 99 0 R 18 100 0 R 19 101 0 R 
  20 102 0 R 21 103 0 R 22 104 0 R 23 105 0 R ] >>
endobj
82 0 obj
<< /S /D /St 1 >>
endobj
83 0 obj
<< /S /D /St 2 >>
endobj
84 0 obj
<< /S /D /St 3 >>
endobj
85 0 obj
<< /S /D /St 4 >>
endobj
86 0 obj
<< /S /D /St 5 >>
endobj
87 0 obj
<< /S /D /St 6 >>
endobj
88 0 obj
<< /S /D /St 7 >>
endobj
89 0 obj
<< /S /D /St 8 >>
endobj
90 0 obj
<< /S /D /St 9 >>
endobj
91 0 obj
<< /S /D /St 10 >>
endobj
92 0 obj
<< /S /D /St 11 >>
endobj
93 0 obj
<< /S /D /St 12 >>
endobj
94 0 obj
<< /S /D /St 13 >>
endobj
95 0 obj
<< /S /D /St 14 >>
endobj
96 0 obj
<< /S /D /St 15 >>
endobj
97 0 obj
<< /S /D /St 16 >>
endobj
98 0 obj
<< /S /D /St 17 >>
endobj
99 0 obj
<< /S /D /St 18 >>
endobj
100 0 obj
<< /S /D /St 19 >>
endobj
101 0 obj
<< /S /D /St 20 >>
endobj
102 0 obj
<< /S /D /St 21 >>
endobj
103 0 obj
<< /S /D /St 22 >>
endobj
104 0 obj
<< /S /D /St 23 >>
endobj
105 0 obj
<< /S /D /St 24 >>
endobj
xref
0 106
0000000000 65535 f
0000000075 00000 n
0000000149 00000 n
0000000259 00000 n
0000000374 00000 n
0000000482 00000 n
0000000691 00000 n
0000000900 00000 n
0000001109 00000 n
0000001231 00000 n
0000001349 00000 n
0000001520 00000 n
0000001749 00000 n
0000001959 00000 n
0000002169 00000 n
0000002379 00000 n
0000002589 00000 n
0000002799 00000 n
0000003009 00000 n
0000003219 00000 n
0000003429 00000 n
0000003639 00000 n
0000003849 00000 n
0000004059 00000 n
0000004269 00000 n
0000004479 00000 n
0000004689 00000 n
0000004899 00000 n
0000005109 00000 n
0000005319 00000 n
0000005529 00000 n
0000005739 00000 n
0000005949 00000 n
0000006058 00000 n
0000006339 00000 n
0000006417 00000 n
0000006535 00000 n
0000006669 00000 n
0000006794 00000 n
0000006960 00000 n
0000007079 00000 n
0000007204 00000 n
0000007345 00000 n
0000007461 00000 n
0000007626 00000 n
0000007745 00000 n
0000007910 00000 n
0000008042 00000 n
0000008190 00000 n
0000008336 00000 n
0000008491 00000 n
0000008639 00000 n
0000008770 00000 n
0000008886 00000 n
0000009008 00000 n
0000009138 00000 n
0000009261 00000 n
0000009492 00000 n
0000016185 00000 n
0000023468 00000 n
0000030953 00000 n
0000035528 00000 n
0000041724 00000 n
0000046430 00000 n
0000052184 00000 n
0000058067 00000 n
0000064161 00000 n
0000069003 00000 n
0000075054 00000 n
0000080222 00000 n
0000086720 00000 n
0000094174 00000 n
0000098138 00000 n
0000103536 00000 n
0000111754 00000 n
0000116903 00000 n
0000122231 00000 n
0000127310 00000 n
0000132433 00000 n
0000136468 00000 n
0000142342 00000 n
0000143346 00000 n
0000143633 00000 n
0000143670 00000 n
0000143707 00000 n
0000143744 00000 n
0000143781 00000 n
0000143818 00000 n
0000143855 00000 n
0000143892 00000 n
0000143929 00000 n
0000143966 00000 n
0000144004 00000 n
0000144042 00000 n
0000144080 00000 n
0000144118 00000 n
0000144156 00000 n
0000144194 00000 n
0000144232 00000 n
0000144270 00000 n
0000144308 00000 n
0000144347 00000 n
0000144386 00000 n
0000144425 00000 n
0000144464 00000 n
0000144503 00000 n
trailer
<< /ID 
 % ReportLab generated PDF document -- digest (http://www.reportlab.com)
 [(\227\222\206\337\265\245\37679\212bS"\213J\255) (\227\222\206\337\265\245\37679\212bS"\213J\255)]
 /Info 33 0 R /Root 32 0 R /Size 106 >>
startxref
144542
%%EOF
